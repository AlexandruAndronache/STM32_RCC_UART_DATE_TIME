
STM32_RCC_UART_DATE_TIME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a70  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003c40  08003c40  00004c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb0  08003cb0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cb0  08003cb0  00004cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb8  08003cb8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb8  08003cb8  00004cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cbc  08003cbc  00004cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003cc0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000005c  08003d1c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08003d1c  00005234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000970e  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001859  00000000  00000000  0000e79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000fff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f1  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021acf  00000000  00000000  00010db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a83a  00000000  00000000  00032880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce498  00000000  00000000  0003d0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b552  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002408  00000000  00000000  0010b598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c28 	.word	0x08003c28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003c28 	.word	0x08003c28

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fb0a 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f816 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f8ee 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f8c2 	bl	8000748 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80005c4:	f000 f872 	bl	80006ac <MX_RTC_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(transmitMessageViaUartFLAG == 1)
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <main+0x30>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d1fb      	bne.n	80005c8 <main+0x18>
	  {
		  printDateAndTime(&hrtc);
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <main+0x34>)
 80005d2:	f000 f979 	bl	80008c8 <printDateAndTime>
		  transmitMessageViaUartFLAG = 0;
 80005d6:	4b02      	ldr	r3, [pc, #8]	@ (80005e0 <main+0x30>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
	  if(transmitMessageViaUartFLAG == 1)
 80005dc:	e7f4      	b.n	80005c8 <main+0x18>
 80005de:	bf00      	nop
 80005e0:	200000e0 	.word	0x200000e0
 80005e4:	20000078 	.word	0x20000078

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2234      	movs	r2, #52	@ 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fe96 	bl	8003328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b24      	ldr	r3, [pc, #144]	@ (80006a4 <SystemClock_Config+0xbc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a23      	ldr	r2, [pc, #140]	@ (80006a4 <SystemClock_Config+0xbc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <SystemClock_Config+0xbc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <SystemClock_Config+0xc0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000634:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <SystemClock_Config+0xc0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <SystemClock_Config+0xc0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000648:	2309      	movs	r3, #9
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000650:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065a:	2300      	movs	r3, #0
 800065c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fc8a 	bl	8001f7c <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800066e:	f000 f963 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000676:	2301      	movs	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fe01 	bl	8001294 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000698:	f000 f94e 	bl	8000938 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	@ 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <MX_RTC_Init+0x94>)
 80006b4:	4a23      	ldr	r2, [pc, #140]	@ (8000744 <MX_RTC_Init+0x98>)
 80006b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <MX_RTC_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <MX_RTC_Init+0x94>)
 80006c0:	227f      	movs	r2, #127	@ 0x7f
 80006c2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <MX_RTC_Init+0x94>)
 80006c6:	22ff      	movs	r2, #255	@ 0xff
 80006c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_RTC_Init+0x94>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_RTC_Init+0x94>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_RTC_Init+0x94>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006dc:	4818      	ldr	r0, [pc, #96]	@ (8000740 <MX_RTC_Init+0x94>)
 80006de:	f001 feeb 	bl	80024b8 <HAL_RTC_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80006e8:	f000 f926 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	RTC_TimeTypeDef rtcTime = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtcDate = {0};
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]

	rtcTime.Hours = 16;
 80006fe:	2310      	movs	r3, #16
 8000700:	713b      	strb	r3, [r7, #4]
	rtcTime.Minutes = 54;
 8000702:	2336      	movs	r3, #54	@ 0x36
 8000704:	717b      	strb	r3, [r7, #5]
	rtcTime.Seconds = 30;
 8000706:	231e      	movs	r3, #30
 8000708:	71bb      	strb	r3, [r7, #6]
	rtcTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800070a:	2301      	movs	r3, #1
 800070c:	71fb      	strb	r3, [r7, #7]

	rtcDate.Date = 6;
 800070e:	2306      	movs	r3, #6
 8000710:	70bb      	strb	r3, [r7, #2]
	rtcDate.Month = RTC_MONTH_SEPTEMBER;
 8000712:	2309      	movs	r3, #9
 8000714:	707b      	strb	r3, [r7, #1]
	rtcDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000716:	2305      	movs	r3, #5
 8000718:	703b      	strb	r3, [r7, #0]
	rtcDate.Year = 24;
 800071a:	2318      	movs	r3, #24
 800071c:	70fb      	strb	r3, [r7, #3]

	HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	4806      	ldr	r0, [pc, #24]	@ (8000740 <MX_RTC_Init+0x94>)
 8000726:	f001 ff4a 	bl	80025be <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	4619      	mov	r1, r3
 8000730:	4803      	ldr	r0, [pc, #12]	@ (8000740 <MX_RTC_Init+0x94>)
 8000732:	f002 f83c 	bl	80027ae <HAL_RTC_SetDate>
  /* USER CODE END RTC_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000078 	.word	0x20000078
 8000744:	40002800 	.word	0x40002800

08000748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <MX_USART2_UART_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000780:	f002 f9a6 	bl	8002ad0 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 f8d5 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000098 	.word	0x20000098
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b35      	ldr	r3, [pc, #212]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a34      	ldr	r2, [pc, #208]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b32      	ldr	r3, [pc, #200]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a2d      	ldr	r2, [pc, #180]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b27      	ldr	r3, [pc, #156]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a26      	ldr	r2, [pc, #152]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b24      	ldr	r3, [pc, #144]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <MX_GPIO_Init+0xf0>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_GPIO_Init+0xf0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2120      	movs	r1, #32
 8000826:	481a      	ldr	r0, [pc, #104]	@ (8000890 <MX_GPIO_Init+0xf4>)
 8000828:	f000 fce8 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000832:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4814      	ldr	r0, [pc, #80]	@ (8000894 <MX_GPIO_Init+0xf8>)
 8000844:	f000 fb46 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000848:	2320      	movs	r3, #32
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <MX_GPIO_Init+0xf4>)
 8000860:	f000 fb38 	bl	8000ed4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	2028      	movs	r0, #40	@ 0x28
 800086a:	f000 fafc 	bl	8000e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800086e:	2028      	movs	r0, #40	@ 0x28
 8000870:	f000 fb15 	bl	8000e9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	210f      	movs	r1, #15
 8000878:	2028      	movs	r0, #40	@ 0x28
 800087a:	f000 faf4 	bl	8000e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800087e:	2028      	movs	r0, #40	@ 0x28
 8000880:	f000 fb0d 	bl	8000e9e <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	@ 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020800 	.word	0x40020800

08000898 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]


	// HAL_RTC_GetTime(&hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
	// HAL_RTC_GetDate(&hrtc, &RTC_DateRead, RTC_FORMAT_BIN);

	 if(transmitMessageViaUartFLAG == 0)
 80008a2:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0x28>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d106      	bne.n	80008b8 <HAL_GPIO_EXTI_Callback+0x20>
		 {
		 transmitMessageViaUartFLAG = 1;
 80008aa:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0x28>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008b0:	2120      	movs	r1, #32
 80008b2:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80008b4:	f000 fcbb 	bl	800122e <HAL_GPIO_TogglePin>
	 //sprintf(msg,"Current Time is: %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,
		//	 RTC_TimeRead.Minutes, RTC_TimeRead.Seconds);



}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000e0 	.word	0x200000e0
 80008c4:	40020000 	.word	0x40020000

080008c8 <printDateAndTime>:

void printDateAndTime(RTC_HandleTypeDef *handleRTC)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b098      	sub	sp, #96	@ 0x60
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	6078      	str	r0, [r7, #4]
	 RTC_TimeTypeDef RTC_TimeRead;
	 RTC_DateTypeDef RTC_DateRead;

	 HAL_RTC_GetTime(handleRTC, &RTC_TimeRead, RTC_FORMAT_BIN);
 80008d0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008d4:	2200      	movs	r2, #0
 80008d6:	4619      	mov	r1, r3
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f001 ff0a 	bl	80026f2 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(handleRTC, &RTC_DateRead, RTC_FORMAT_BIN);
 80008de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008e2:	2200      	movs	r2, #0
 80008e4:	4619      	mov	r1, r3
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f001 ffe5 	bl	80028b6 <HAL_RTC_GetDate>
	char buffer[50];
	 sprintf(buffer,"Current Time is: %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,
 80008ec:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80008f0:	461a      	mov	r2, r3
			 RTC_TimeRead.Minutes, RTC_TimeRead.Seconds);
 80008f2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
	 sprintf(buffer,"Current Time is: %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,
 80008f6:	4619      	mov	r1, r3
			 RTC_TimeRead.Minutes, RTC_TimeRead.Seconds);
 80008f8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
	 sprintf(buffer,"Current Time is: %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,
 80008fc:	f107 000c 	add.w	r0, r7, #12
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	460b      	mov	r3, r1
 8000904:	490a      	ldr	r1, [pc, #40]	@ (8000930 <printDateAndTime+0x68>)
 8000906:	f002 fcef 	bl	80032e8 <siprintf>

	 HAL_UART_Transmit(&huart2, (uint8_t* )buffer, strlen(buffer), HAL_MAX_DELAY);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fc7e 	bl	8000210 <strlen>
 8000914:	4603      	mov	r3, r0
 8000916:	b29a      	uxth	r2, r3
 8000918:	f107 010c 	add.w	r1, r7, #12
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	4804      	ldr	r0, [pc, #16]	@ (8000934 <printDateAndTime+0x6c>)
 8000922:	f002 f925 	bl	8002b70 <HAL_UART_Transmit>
}
 8000926:	bf00      	nop
 8000928:	3758      	adds	r7, #88	@ 0x58
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	08003c40 	.word	0x08003c40
 8000934:	20000098 	.word	0x20000098

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000958:	6453      	str	r3, [r2, #68]	@ 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000982:	2007      	movs	r0, #7
 8000984:	f000 fa64 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09a      	sub	sp, #104	@ 0x68
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	225c      	movs	r2, #92	@ 0x5c
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 fcbf 	bl	8003328 <memset>
  if(hrtc->Instance==RTC)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a0c      	ldr	r2, [pc, #48]	@ (80009e0 <HAL_RTC_MspInit+0x4c>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d111      	bne.n	80009d8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009b4:	2320      	movs	r3, #32
 80009b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fd80 	bl	80014c8 <HAL_RCCEx_PeriphCLKConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80009ce:	f7ff ffb3 	bl	8000938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009d2:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <HAL_RTC_MspInit+0x50>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80009d8:	bf00      	nop
 80009da:	3768      	adds	r7, #104	@ 0x68
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40002800 	.word	0x40002800
 80009e4:	42470e3c 	.word	0x42470e3c

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <HAL_UART_MspInit+0x84>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12b      	bne.n	8000a62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a42:	230c      	movs	r3, #12
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a52:	2307      	movs	r3, #7
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <HAL_UART_MspInit+0x8c>)
 8000a5e:	f000 fa39 	bl	8000ed4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f8cf 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ada:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ade:	f000 fbc1 	bl	8001264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f002 fc0e 	bl	8003338 <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20020000 	.word	0x20020000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	200000e4 	.word	0x200000e4
 8000b50:	20000238 	.word	0x20000238

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b7c:	f7ff ffea 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f002 fbcd 	bl	8003344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fd01 	bl	80005b0 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bbc:	08003cc0 	.word	0x08003cc0
  ldr r2, =_sbss
 8000bc0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bc4:	20000234 	.word	0x20000234

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	@ (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f92b 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fea0 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f943 	bl	8000eba <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f90b 	bl	8000e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	@ (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200000e8 	.word	0x200000e8

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200000e8 	.word	0x200000e8

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	@ (8000d4c <__NVIC_EnableIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	@ (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	@ (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	@ 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	@ 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f7ff ff8e 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff29 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff ff3e 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff8e 	bl	8000da4 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff5d 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff31 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffa2 	bl	8000e0c <SysTick_Config>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e165      	b.n	80011bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8154 	bne.w	80011b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80ae 	beq.w	80011b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b5d      	ldr	r3, [pc, #372]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a5c      	ldr	r2, [pc, #368]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b5a      	ldr	r3, [pc, #360]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a58      	ldr	r2, [pc, #352]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	@ (80011dc <HAL_GPIO_Init+0x308>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d025      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	@ (80011e0 <HAL_GPIO_Init+0x30c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01f      	beq.n	80010ea <HAL_GPIO_Init+0x216>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4d      	ldr	r2, [pc, #308]	@ (80011e4 <HAL_GPIO_Init+0x310>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x212>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	@ (80011e8 <HAL_GPIO_Init+0x314>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x20e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	@ (80011ec <HAL_GPIO_Init+0x318>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x20a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4a      	ldr	r2, [pc, #296]	@ (80011f0 <HAL_GPIO_Init+0x31c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x206>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a49      	ldr	r2, [pc, #292]	@ (80011f4 <HAL_GPIO_Init+0x320>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x202>
 80010d2:	2306      	movs	r3, #6
 80010d4:	e00c      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e00a      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010da:	2305      	movs	r3, #5
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010de:	2304      	movs	r3, #4
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010ee:	2300      	movs	r3, #0
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001100:	4935      	ldr	r1, [pc, #212]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110e:	4b3a      	ldr	r3, [pc, #232]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001132:	4a31      	ldr	r2, [pc, #196]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001138:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800115c:	4a26      	ldr	r2, [pc, #152]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001162:	4b25      	ldr	r3, [pc, #148]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001186:	4a1c      	ldr	r2, [pc, #112]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b0:	4a11      	ldr	r2, [pc, #68]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	f67f ae96 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3724      	adds	r7, #36	@ 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40013c00 	.word	0x40013c00

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800122e:	b480      	push	{r7}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001240:	887a      	ldrh	r2, [r7, #2]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	041a      	lsls	r2, r3, #16
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43d9      	mvns	r1, r3
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	400b      	ands	r3, r1
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	619a      	str	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	4013      	ands	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800127a:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fb08 	bl	8000898 <HAL_GPIO_EXTI_Callback>
  }
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40013c00 	.word	0x40013c00

08001294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0cc      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012a8:	4b68      	ldr	r3, [pc, #416]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d90c      	bls.n	80012d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b65      	ldr	r3, [pc, #404]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012be:	4b63      	ldr	r3, [pc, #396]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0b8      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d020      	beq.n	800131e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012e8:	4b59      	ldr	r3, [pc, #356]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	4a58      	ldr	r2, [pc, #352]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001300:	4b53      	ldr	r3, [pc, #332]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	4a52      	ldr	r2, [pc, #328]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800130a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800130c:	4b50      	ldr	r3, [pc, #320]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	494d      	ldr	r1, [pc, #308]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 800131a:	4313      	orrs	r3, r2
 800131c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d044      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d107      	bne.n	8001342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b47      	ldr	r3, [pc, #284]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d119      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e07f      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d003      	beq.n	8001352 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800134e:	2b03      	cmp	r3, #3
 8001350:	d107      	bne.n	8001362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001352:	4b3f      	ldr	r3, [pc, #252]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e06f      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001362:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e067      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001372:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f023 0203 	bic.w	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4934      	ldr	r1, [pc, #208]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	4313      	orrs	r3, r2
 8001382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001384:	f7ff fc88 	bl	8000c98 <HAL_GetTick>
 8001388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	e00a      	b.n	80013a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800138c:	f7ff fc84 	bl	8000c98 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139a:	4293      	cmp	r3, r2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e04f      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 020c 	and.w	r2, r3, #12
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d1eb      	bne.n	800138c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013b4:	4b25      	ldr	r3, [pc, #148]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d20c      	bcs.n	80013dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b22      	ldr	r3, [pc, #136]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ca:	4b20      	ldr	r3, [pc, #128]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e032      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4916      	ldr	r1, [pc, #88]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d009      	beq.n	800141a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001406:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	490e      	ldr	r1, [pc, #56]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	4313      	orrs	r3, r2
 8001418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800141a:	f000 fb7f 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 800141e:	4602      	mov	r2, r0
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	490a      	ldr	r1, [pc, #40]	@ (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	5ccb      	ldrb	r3, [r1, r3]
 800142e:	fa22 f303 	lsr.w	r3, r2, r3
 8001432:	4a09      	ldr	r2, [pc, #36]	@ (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_RCC_ClockConfig+0x1c8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fbe8 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023c00 	.word	0x40023c00
 8001450:	40023800 	.word	0x40023800
 8001454:	08003c64 	.word	0x08003c64
 8001458:	20000000 	.word	0x20000000
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_RCC_GetHCLKFreq+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000

08001478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800147c:	f7ff fff0 	bl	8001460 <HAL_RCC_GetHCLKFreq>
 8001480:	4602      	mov	r2, r0
 8001482:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	0a9b      	lsrs	r3, r3, #10
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	4903      	ldr	r1, [pc, #12]	@ (800149c <HAL_RCC_GetPCLK1Freq+0x24>)
 800148e:	5ccb      	ldrb	r3, [r1, r3]
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	08003c74 	.word	0x08003c74

080014a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014a4:	f7ff ffdc 	bl	8001460 <HAL_RCC_GetHCLKFreq>
 80014a8:	4602      	mov	r2, r0
 80014aa:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	0b5b      	lsrs	r3, r3, #13
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	4903      	ldr	r1, [pc, #12]	@ (80014c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014b6:	5ccb      	ldrb	r3, [r1, r3]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	08003c74 	.word	0x08003c74

080014c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	@ 0x30
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d010      	beq.n	8001522 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001500:	4b6f      	ldr	r3, [pc, #444]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001502:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001506:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150e:	496c      	ldr	r1, [pc, #432]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001510:	4313      	orrs	r3, r2
 8001512:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800151e:	2301      	movs	r3, #1
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d010      	beq.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800152e:	4b64      	ldr	r3, [pc, #400]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001534:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800153c:	4960      	ldr	r1, [pc, #384]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800153e:	4313      	orrs	r3, r2
 8001540:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800154c:	2301      	movs	r3, #1
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d017      	beq.n	800158c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800155c:	4b58      	ldr	r3, [pc, #352]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800155e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001562:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4955      	ldr	r1, [pc, #340]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800156c:	4313      	orrs	r3, r2
 800156e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800157a:	d101      	bne.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800157c:	2301      	movs	r3, #1
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001588:	2301      	movs	r3, #1
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d017      	beq.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001598:	4b49      	ldr	r3, [pc, #292]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800159a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800159e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a6:	4946      	ldr	r1, [pc, #280]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015b6:	d101      	bne.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80015c4:	2301      	movs	r3, #1
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0320 	and.w	r3, r3, #32
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 808a 	beq.w	80016ea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b39      	ldr	r3, [pc, #228]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a38      	ldr	r2, [pc, #224]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e6:	4b36      	ldr	r3, [pc, #216]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80015f2:	4b34      	ldr	r3, [pc, #208]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a33      	ldr	r2, [pc, #204]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015fe:	f7ff fb4b 	bl	8000c98 <HAL_GetTick>
 8001602:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001606:	f7ff fb47 	bl	8000c98 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e278      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001618:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001624:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800162c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d02f      	beq.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800163c:	6a3a      	ldr	r2, [r7, #32]
 800163e:	429a      	cmp	r2, r3
 8001640:	d028      	beq.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001642:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800164a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800164c:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001658:	4a19      	ldr	r2, [pc, #100]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800165e:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b01      	cmp	r3, #1
 8001668:	d114      	bne.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fb15 	bl	8000c98 <HAL_GetTick>
 800166e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	e00a      	b.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff fb11 	bl	8000c98 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e240      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800168a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ee      	beq.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800169c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80016a0:	d114      	bne.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80016b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016b6:	4902      	ldr	r1, [pc, #8]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]
 80016bc:	e00c      	b.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000
 80016c8:	42470e40 	.word	0x42470e40
 80016cc:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a49      	ldr	r2, [pc, #292]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016d2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80016d6:	6093      	str	r3, [r2, #8]
 80016d8:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e4:	4944      	ldr	r1, [pc, #272]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80016fc:	4b3f      	ldr	r3, [pc, #252]	@ (80017fc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80016fe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00a      	beq.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800170c:	4b3a      	ldr	r3, [pc, #232]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800170e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001712:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	4937      	ldr	r1, [pc, #220]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800171c:	4313      	orrs	r3, r2
 800171e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00a      	beq.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800172e:	4b32      	ldr	r3, [pc, #200]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001734:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800173c:	492e      	ldr	r1, [pc, #184]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800173e:	4313      	orrs	r3, r2
 8001740:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d011      	beq.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001750:	4b29      	ldr	r3, [pc, #164]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001756:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800175e:	4926      	ldr	r1, [pc, #152]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001760:	4313      	orrs	r3, r2
 8001762:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800176a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800176e:	d101      	bne.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001770:	2301      	movs	r3, #1
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00a      	beq.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001780:	4b1d      	ldr	r3, [pc, #116]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001786:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	491a      	ldr	r1, [pc, #104]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001790:	4313      	orrs	r3, r2
 8001792:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d011      	beq.n	80017c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80017a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017b0:	4911      	ldr	r1, [pc, #68]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017c0:	d101      	bne.n	80017c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80017c2:	2301      	movs	r3, #1
 80017c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80017c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d005      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017d4:	f040 80ff 	bne.w	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80017de:	f7ff fa5b 	bl	8000c98 <HAL_GetTick>
 80017e2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017e4:	e00e      	b.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80017e6:	f7ff fa57 	bl	8000c98 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d907      	bls.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e188      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x642>
 80017f8:	40023800 	.word	0x40023800
 80017fc:	424711e0 	.word	0x424711e0
 8001800:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001804:	4b7e      	ldr	r3, [pc, #504]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ea      	bne.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001820:	2b00      	cmp	r3, #0
 8001822:	d009      	beq.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800182c:	2b00      	cmp	r3, #0
 800182e:	d028      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d124      	bne.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001838:	4b71      	ldr	r3, [pc, #452]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800183a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800183e:	0c1b      	lsrs	r3, r3, #16
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	3301      	adds	r3, #1
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800184a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800184c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001850:	0e1b      	lsrs	r3, r3, #24
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	019b      	lsls	r3, r3, #6
 8001862:	431a      	orrs	r2, r3
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	3b01      	subs	r3, #1
 800186a:	041b      	lsls	r3, r3, #16
 800186c:	431a      	orrs	r2, r3
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	071b      	lsls	r3, r3, #28
 800187a:	4961      	ldr	r1, [pc, #388]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800187c:	4313      	orrs	r3, r2
 800187e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001896:	d00a      	beq.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d035      	beq.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018ac:	d130      	bne.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80018ae:	4b54      	ldr	r3, [pc, #336]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018b4:	0c1b      	lsrs	r3, r3, #16
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	3301      	adds	r3, #1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80018c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018c6:	0f1b      	lsrs	r3, r3, #28
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	019b      	lsls	r3, r3, #6
 80018d8:	431a      	orrs	r2, r3
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	085b      	lsrs	r3, r3, #1
 80018de:	3b01      	subs	r3, #1
 80018e0:	041b      	lsls	r3, r3, #16
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	061b      	lsls	r3, r3, #24
 80018ea:	431a      	orrs	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	071b      	lsls	r3, r3, #28
 80018f0:	4943      	ldr	r1, [pc, #268]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80018f8:	4b41      	ldr	r3, [pc, #260]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018fe:	f023 021f 	bic.w	r2, r3, #31
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	3b01      	subs	r3, #1
 8001908:	493d      	ldr	r1, [pc, #244]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800190a:	4313      	orrs	r3, r2
 800190c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d029      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001924:	d124      	bne.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001926:	4b36      	ldr	r3, [pc, #216]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	3301      	adds	r3, #1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001938:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800193a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800193e:	0f1b      	lsrs	r3, r3, #28
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	019b      	lsls	r3, r3, #6
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	3b01      	subs	r3, #1
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	431a      	orrs	r2, r3
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	061b      	lsls	r3, r3, #24
 8001962:	431a      	orrs	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	071b      	lsls	r3, r3, #28
 8001968:	4925      	ldr	r1, [pc, #148]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800196a:	4313      	orrs	r3, r2
 800196c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001978:	2b00      	cmp	r3, #0
 800197a:	d016      	beq.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	3b01      	subs	r3, #1
 8001990:	041b      	lsls	r3, r3, #16
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	061b      	lsls	r3, r3, #24
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	071b      	lsls	r3, r3, #28
 80019a2:	4917      	ldr	r1, [pc, #92]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80019aa:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80019b0:	f7ff f972 	bl	8000c98 <HAL_GetTick>
 80019b4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80019b8:	f7ff f96e 	bl	8000c98 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e09f      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80019d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d8:	2b01      	cmp	r3, #1
 80019da:	f040 8095 	bne.w	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80019e4:	f7ff f958 	bl	8000c98 <HAL_GetTick>
 80019e8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019ea:	e00f      	b.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80019ec:	f7ff f954 	bl	8000c98 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d908      	bls.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e085      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x642>
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	42470068 	.word	0x42470068
 8001a08:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001a0c:	4b41      	ldr	r3, [pc, #260]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a18:	d0e8      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d02b      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d127      	bne.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001a42:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a48:	0c1b      	lsrs	r3, r3, #16
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699a      	ldr	r2, [r3, #24]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	019b      	lsls	r3, r3, #6
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	085b      	lsrs	r3, r3, #1
 8001a64:	3b01      	subs	r3, #1
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	061b      	lsls	r3, r3, #24
 8001a70:	4928      	ldr	r1, [pc, #160]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001a78:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a7e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a86:	3b01      	subs	r3, #1
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	4922      	ldr	r1, [pc, #136]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d01d      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001aa6:	d118      	bne.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aae:	0e1b      	lsrs	r3, r3, #24
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	019b      	lsls	r3, r3, #6
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	041b      	lsls	r3, r3, #16
 8001acc:	431a      	orrs	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	4910      	ldr	r1, [pc, #64]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ae0:	f7ff f8da 	bl	8000c98 <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ae8:	f7ff f8d6 	bl	8000c98 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e007      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b06:	d1ef      	bne.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3730      	adds	r7, #48	@ 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	42470070 	.word	0x42470070

08001b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b20:	b0ae      	sub	sp, #184	@ 0xb8
 8001b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b42:	4bcb      	ldr	r3, [pc, #812]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	f200 8206 	bhi.w	8001f5c <HAL_RCC_GetSysClockFreq+0x440>
 8001b50:	a201      	add	r2, pc, #4	@ (adr r2, 8001b58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b56:	bf00      	nop
 8001b58:	08001b8d 	.word	0x08001b8d
 8001b5c:	08001f5d 	.word	0x08001f5d
 8001b60:	08001f5d 	.word	0x08001f5d
 8001b64:	08001f5d 	.word	0x08001f5d
 8001b68:	08001b95 	.word	0x08001b95
 8001b6c:	08001f5d 	.word	0x08001f5d
 8001b70:	08001f5d 	.word	0x08001f5d
 8001b74:	08001f5d 	.word	0x08001f5d
 8001b78:	08001b9d 	.word	0x08001b9d
 8001b7c:	08001f5d 	.word	0x08001f5d
 8001b80:	08001f5d 	.word	0x08001f5d
 8001b84:	08001f5d 	.word	0x08001f5d
 8001b88:	08001d8d 	.word	0x08001d8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4bb9      	ldr	r3, [pc, #740]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001b92:	e1e7      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b94:	4bb8      	ldr	r3, [pc, #736]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b9a:	e1e3      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b9c:	4bb4      	ldr	r3, [pc, #720]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba8:	4bb1      	ldr	r3, [pc, #708]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d071      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb4:	4bae      	ldr	r3, [pc, #696]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	099b      	lsrs	r3, r3, #6
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001bc0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001bda:	4622      	mov	r2, r4
 8001bdc:	462b      	mov	r3, r5
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	0159      	lsls	r1, r3, #5
 8001be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bec:	0150      	lsls	r0, r2, #5
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	1a51      	subs	r1, r2, r1
 8001bf6:	6439      	str	r1, [r7, #64]	@ 0x40
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001c0c:	4649      	mov	r1, r9
 8001c0e:	018b      	lsls	r3, r1, #6
 8001c10:	4641      	mov	r1, r8
 8001c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c16:	4641      	mov	r1, r8
 8001c18:	018a      	lsls	r2, r1, #6
 8001c1a:	4641      	mov	r1, r8
 8001c1c:	1a51      	subs	r1, r2, r1
 8001c1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c20:	4649      	mov	r1, r9
 8001c22:	eb63 0301 	sbc.w	r3, r3, r1
 8001c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001c34:	4649      	mov	r1, r9
 8001c36:	00cb      	lsls	r3, r1, #3
 8001c38:	4641      	mov	r1, r8
 8001c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c3e:	4641      	mov	r1, r8
 8001c40:	00ca      	lsls	r2, r1, #3
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	4622      	mov	r2, r4
 8001c4a:	189b      	adds	r3, r3, r2
 8001c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c4e:	462b      	mov	r3, r5
 8001c50:	460a      	mov	r2, r1
 8001c52:	eb42 0303 	adc.w	r3, r2, r3
 8001c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c64:	4629      	mov	r1, r5
 8001c66:	024b      	lsls	r3, r1, #9
 8001c68:	4621      	mov	r1, r4
 8001c6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c6e:	4621      	mov	r1, r4
 8001c70:	024a      	lsls	r2, r1, #9
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001c80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001c84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c88:	f7fe fb1a 	bl	80002c0 <__aeabi_uldivmod>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4613      	mov	r3, r2
 8001c92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c96:	e067      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c98:	4b75      	ldr	r3, [pc, #468]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ca4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001cb6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001cba:	4622      	mov	r2, r4
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	0159      	lsls	r1, r3, #5
 8001cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ccc:	0150      	lsls	r0, r2, #5
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	1a51      	subs	r1, r2, r1
 8001cd6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001cd8:	4629      	mov	r1, r5
 8001cda:	eb63 0301 	sbc.w	r3, r3, r1
 8001cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001cec:	4649      	mov	r1, r9
 8001cee:	018b      	lsls	r3, r1, #6
 8001cf0:	4641      	mov	r1, r8
 8001cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	018a      	lsls	r2, r1, #6
 8001cfa:	4641      	mov	r1, r8
 8001cfc:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d00:	4649      	mov	r1, r9
 8001d02:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d1a:	4692      	mov	sl, r2
 8001d1c:	469b      	mov	fp, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	eb1a 0303 	adds.w	r3, sl, r3
 8001d24:	623b      	str	r3, [r7, #32]
 8001d26:	462b      	mov	r3, r5
 8001d28:	eb4b 0303 	adc.w	r3, fp, r3
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	028b      	lsls	r3, r1, #10
 8001d3e:	4621      	mov	r1, r4
 8001d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d44:	4621      	mov	r1, r4
 8001d46:	028a      	lsls	r2, r1, #10
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d50:	2200      	movs	r2, #0
 8001d52:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d54:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001d5a:	f7fe fab1 	bl	80002c0 <__aeabi_uldivmod>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4613      	mov	r3, r2
 8001d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d68:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	3301      	adds	r3, #1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d8a:	e0eb      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d8c:	4b38      	ldr	r3, [pc, #224]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d98:	4b35      	ldr	r3, [pc, #212]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d06b      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da4:	4b32      	ldr	r3, [pc, #200]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	2200      	movs	r2, #0
 8001dac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001dae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001db0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001db8:	2300      	movs	r3, #0
 8001dba:	667b      	str	r3, [r7, #100]	@ 0x64
 8001dbc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	462b      	mov	r3, r5
 8001dc4:	f04f 0000 	mov.w	r0, #0
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	0159      	lsls	r1, r3, #5
 8001dce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd2:	0150      	lsls	r0, r2, #5
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4621      	mov	r1, r4
 8001dda:	1a51      	subs	r1, r2, r1
 8001ddc:	61b9      	str	r1, [r7, #24]
 8001dde:	4629      	mov	r1, r5
 8001de0:	eb63 0301 	sbc.w	r3, r3, r1
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001df2:	4659      	mov	r1, fp
 8001df4:	018b      	lsls	r3, r1, #6
 8001df6:	4651      	mov	r1, sl
 8001df8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dfc:	4651      	mov	r1, sl
 8001dfe:	018a      	lsls	r2, r1, #6
 8001e00:	4651      	mov	r1, sl
 8001e02:	ebb2 0801 	subs.w	r8, r2, r1
 8001e06:	4659      	mov	r1, fp
 8001e08:	eb63 0901 	sbc.w	r9, r3, r1
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e20:	4690      	mov	r8, r2
 8001e22:	4699      	mov	r9, r3
 8001e24:	4623      	mov	r3, r4
 8001e26:	eb18 0303 	adds.w	r3, r8, r3
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	462b      	mov	r3, r5
 8001e2e:	eb49 0303 	adc.w	r3, r9, r3
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e40:	4629      	mov	r1, r5
 8001e42:	024b      	lsls	r3, r1, #9
 8001e44:	4621      	mov	r1, r4
 8001e46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	024a      	lsls	r2, r1, #9
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e56:	2200      	movs	r2, #0
 8001e58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e5a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e60:	f7fe fa2e 	bl	80002c0 <__aeabi_uldivmod>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4613      	mov	r3, r2
 8001e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e6e:	e065      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x420>
 8001e70:	40023800 	.word	0x40023800
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	2200      	movs	r2, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	4611      	mov	r1, r2
 8001e88:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e8e:	2300      	movs	r3, #0
 8001e90:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e92:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001e96:	4642      	mov	r2, r8
 8001e98:	464b      	mov	r3, r9
 8001e9a:	f04f 0000 	mov.w	r0, #0
 8001e9e:	f04f 0100 	mov.w	r1, #0
 8001ea2:	0159      	lsls	r1, r3, #5
 8001ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea8:	0150      	lsls	r0, r2, #5
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4641      	mov	r1, r8
 8001eb0:	1a51      	subs	r1, r2, r1
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	4649      	mov	r1, r9
 8001eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ec8:	4659      	mov	r1, fp
 8001eca:	018b      	lsls	r3, r1, #6
 8001ecc:	4651      	mov	r1, sl
 8001ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ed2:	4651      	mov	r1, sl
 8001ed4:	018a      	lsls	r2, r1, #6
 8001ed6:	4651      	mov	r1, sl
 8001ed8:	1a54      	subs	r4, r2, r1
 8001eda:	4659      	mov	r1, fp
 8001edc:	eb63 0501 	sbc.w	r5, r3, r1
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	00eb      	lsls	r3, r5, #3
 8001eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eee:	00e2      	lsls	r2, r4, #3
 8001ef0:	4614      	mov	r4, r2
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	4643      	mov	r3, r8
 8001ef6:	18e3      	adds	r3, r4, r3
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	464b      	mov	r3, r9
 8001efc:	eb45 0303 	adc.w	r3, r5, r3
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f0e:	4629      	mov	r1, r5
 8001f10:	028b      	lsls	r3, r1, #10
 8001f12:	4621      	mov	r1, r4
 8001f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f18:	4621      	mov	r1, r4
 8001f1a:	028a      	lsls	r2, r1, #10
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f24:	2200      	movs	r2, #0
 8001f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f28:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f2a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f2e:	f7fe f9c7 	bl	80002c0 <__aeabi_uldivmod>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4613      	mov	r3, r2
 8001f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	0f1b      	lsrs	r3, r3, #28
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f5a:	e003      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	37b8      	adds	r7, #184	@ 0xb8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	00f42400 	.word	0x00f42400

08001f7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e28d      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8083 	beq.w	80020a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f9c:	4b94      	ldr	r3, [pc, #592]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d019      	beq.n	8001fdc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fa8:	4b91      	ldr	r3, [pc, #580]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fb4:	4b8e      	ldr	r3, [pc, #568]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fc0:	d00c      	beq.n	8001fdc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc2:	4b8b      	ldr	r3, [pc, #556]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d112      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fce:	4b88      	ldr	r3, [pc, #544]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fda:	d10b      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	4b84      	ldr	r3, [pc, #528]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d05b      	beq.n	80020a0 <HAL_RCC_OscConfig+0x124>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d157      	bne.n	80020a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e25a      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0x90>
 8001ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7b      	ldr	r2, [pc, #492]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e01d      	b.n	8002048 <HAL_RCC_OscConfig+0xcc>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0xb4>
 8002016:	4b76      	ldr	r3, [pc, #472]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a75      	ldr	r2, [pc, #468]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b73      	ldr	r3, [pc, #460]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a72      	ldr	r2, [pc, #456]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xcc>
 8002030:	4b6f      	ldr	r3, [pc, #444]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6e      	ldr	r2, [pc, #440]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b6c      	ldr	r3, [pc, #432]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a6b      	ldr	r2, [pc, #428]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe fe22 	bl	8000c98 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002058:	f7fe fe1e 	bl	8000c98 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	@ 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e21f      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b61      	ldr	r3, [pc, #388]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xdc>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe fe0e 	bl	8000c98 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002080:	f7fe fe0a 	bl	8000c98 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	@ 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e20b      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b57      	ldr	r3, [pc, #348]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x104>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06f      	beq.n	800218e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020ae:	4b50      	ldr	r3, [pc, #320]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d017      	beq.n	80020ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020ba:	4b4d      	ldr	r3, [pc, #308]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d105      	bne.n	80020d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020c6:	4b4a      	ldr	r3, [pc, #296]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d2:	4b47      	ldr	r3, [pc, #284]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d11c      	bne.n	8002118 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b44      	ldr	r3, [pc, #272]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d116      	bne.n	8002118 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	4b41      	ldr	r3, [pc, #260]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_RCC_OscConfig+0x186>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e1d3      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	4b3b      	ldr	r3, [pc, #236]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4937      	ldr	r1, [pc, #220]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	e03a      	b.n	800218e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002120:	4b34      	ldr	r3, [pc, #208]	@ (80021f4 <HAL_RCC_OscConfig+0x278>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe fdb7 	bl	8000c98 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212e:	f7fe fdb3 	bl	8000c98 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e1b4      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002140:	4b2b      	ldr	r3, [pc, #172]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b28      	ldr	r3, [pc, #160]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4925      	ldr	r1, [pc, #148]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
 8002160:	e015      	b.n	800218e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002162:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <HAL_RCC_OscConfig+0x278>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7fe fd96 	bl	8000c98 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002170:	f7fe fd92 	bl	8000c98 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e193      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d036      	beq.n	8002208 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d016      	beq.n	80021d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7fe fd76 	bl	8000c98 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b0:	f7fe fd72 	bl	8000c98 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e173      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 80021c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x234>
 80021ce:	e01b      	b.n	8002208 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d0:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7fe fd5f 	bl	8000c98 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	e00e      	b.n	80021fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021de:	f7fe fd5b 	bl	8000c98 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d907      	bls.n	80021fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e15c      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
 80021f0:	40023800 	.word	0x40023800
 80021f4:	42470000 	.word	0x42470000
 80021f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80021fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ea      	bne.n	80021de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8097 	beq.w	8002344 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b83      	ldr	r3, [pc, #524]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	4b7f      	ldr	r3, [pc, #508]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	4a7e      	ldr	r2, [pc, #504]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	@ 0x40
 8002236:	4b7c      	ldr	r3, [pc, #496]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b79      	ldr	r3, [pc, #484]	@ (800242c <HAL_RCC_OscConfig+0x4b0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b76      	ldr	r3, [pc, #472]	@ (800242c <HAL_RCC_OscConfig+0x4b0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a75      	ldr	r2, [pc, #468]	@ (800242c <HAL_RCC_OscConfig+0x4b0>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7fe fd1b 	bl	8000c98 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7fe fd17 	bl	8000c98 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e118      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b6c      	ldr	r3, [pc, #432]	@ (800242c <HAL_RCC_OscConfig+0x4b0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x31e>
 800228c:	4b66      	ldr	r3, [pc, #408]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002290:	4a65      	ldr	r2, [pc, #404]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6713      	str	r3, [r2, #112]	@ 0x70
 8002298:	e01c      	b.n	80022d4 <HAL_RCC_OscConfig+0x358>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x340>
 80022a2:	4b61      	ldr	r3, [pc, #388]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a6:	4a60      	ldr	r2, [pc, #384]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0x358>
 80022bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c0:	4a59      	ldr	r2, [pc, #356]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c8:	4b57      	ldr	r3, [pc, #348]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022cc:	4a56      	ldr	r2, [pc, #344]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d015      	beq.n	8002308 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7fe fcdc 	bl	8000c98 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7fe fcd8 	bl	8000c98 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0d7      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0ee      	beq.n	80022e4 <HAL_RCC_OscConfig+0x368>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002308:	f7fe fcc6 	bl	8000c98 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230e:	e00a      	b.n	8002326 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7fe fcc2 	bl	8000c98 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0c1      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002326:	4b40      	ldr	r3, [pc, #256]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ee      	bne.n	8002310 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002338:	4b3b      	ldr	r3, [pc, #236]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	4a3a      	ldr	r2, [pc, #232]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 800233e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002342:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80ad 	beq.w	80024a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800234e:	4b36      	ldr	r3, [pc, #216]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b08      	cmp	r3, #8
 8002358:	d060      	beq.n	800241c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d145      	bne.n	80023ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b33      	ldr	r3, [pc, #204]	@ (8002430 <HAL_RCC_OscConfig+0x4b4>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fc96 	bl	8000c98 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fc92 	bl	8000c98 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e093      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	3b01      	subs	r3, #1
 80023a8:	041b      	lsls	r3, r3, #16
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	071b      	lsls	r3, r3, #28
 80023ba:	491b      	ldr	r1, [pc, #108]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_RCC_OscConfig+0x4b4>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe fc67 	bl	8000c98 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fc63 	bl	8000c98 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e064      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x452>
 80023ec:	e05c      	b.n	80024a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <HAL_RCC_OscConfig+0x4b4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe fc50 	bl	8000c98 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fc4c 	bl	8000c98 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04d      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x480>
 800241a:	e045      	b.n	80024a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e040      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
 8002428:	40023800 	.word	0x40023800
 800242c:	40007000 	.word	0x40007000
 8002430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002434:	4b1f      	ldr	r3, [pc, #124]	@ (80024b4 <HAL_RCC_OscConfig+0x538>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d030      	beq.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d129      	bne.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d122      	bne.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800246a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246c:	4293      	cmp	r3, r2
 800246e:	d119      	bne.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	3b01      	subs	r3, #1
 800247e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d10f      	bne.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800

080024b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e073      	b.n	80025b6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7f5b      	ldrb	r3, [r3, #29]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fa58 	bl	8000994 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d055      	beq.n	80025a4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	22ca      	movs	r2, #202	@ 0xca
 80024fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2253      	movs	r2, #83	@ 0x53
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fa49 	bl	80029a0 <RTC_EnterInitMode>
 800250e:	4603      	mov	r3, r0
 8002510:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d12c      	bne.n	8002572 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800252a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6899      	ldr	r1, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68d2      	ldr	r2, [r2, #12]
 8002552:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6919      	ldr	r1, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	041a      	lsls	r2, r3, #16
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fa50 	bl	8002a0e <RTC_ExitInitMode>
 800256e:	4603      	mov	r3, r0
 8002570:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d110      	bne.n	800259a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002586:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	22ff      	movs	r2, #255	@ 0xff
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80025a2:	e001      	b.n	80025a8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80025be:	b590      	push	{r4, r7, lr}
 80025c0:	b087      	sub	sp, #28
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	7f1b      	ldrb	r3, [r3, #28]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_RTC_SetTime+0x1c>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e087      	b.n	80026ea <HAL_RTC_SetTime+0x12c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2202      	movs	r2, #2
 80025e4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d126      	bne.n	800263a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fa27 	bl	8002a58 <RTC_ByteToBcd2>
 800260a:	4603      	mov	r3, r0
 800260c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fa20 	bl	8002a58 <RTC_ByteToBcd2>
 8002618:	4603      	mov	r3, r0
 800261a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800261c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	789b      	ldrb	r3, [r3, #2]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fa18 	bl	8002a58 <RTC_ByteToBcd2>
 8002628:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800262a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	78db      	ldrb	r3, [r3, #3]
 8002632:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e018      	b.n	800266c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2200      	movs	r2, #0
 800264c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	785b      	ldrb	r3, [r3, #1]
 8002658:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800265a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002660:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	78db      	ldrb	r3, [r3, #3]
 8002666:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	22ca      	movs	r2, #202	@ 0xca
 8002672:	625a      	str	r2, [r3, #36]	@ 0x24
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2253      	movs	r2, #83	@ 0x53
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f98f 	bl	80029a0 <RTC_EnterInitMode>
 8002682:	4603      	mov	r3, r0
 8002684:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002686:	7cfb      	ldrb	r3, [r7, #19]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d120      	bne.n	80026ce <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002696:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800269a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6899      	ldr	r1, [r3, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f9a2 	bl	8002a0e <RTC_ExitInitMode>
 80026ca:	4603      	mov	r3, r0
 80026cc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	22ff      	movs	r2, #255	@ 0xff
 80026e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]

  return status;
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd90      	pop	{r4, r7, pc}

080026f2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002724:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002728:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002734:	b2da      	uxtb	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002752:	b2da      	uxtb	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	0d9b      	lsrs	r3, r3, #22
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	b2da      	uxtb	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d11a      	bne.n	80027a4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f98e 	bl	8002a94 <RTC_Bcd2ToByte>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	785b      	ldrb	r3, [r3, #1]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f985 	bl	8002a94 <RTC_Bcd2ToByte>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	789b      	ldrb	r3, [r3, #2]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f97c 	bl	8002a94 <RTC_Bcd2ToByte>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80027ae:	b590      	push	{r4, r7, lr}
 80027b0:	b087      	sub	sp, #28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	7f1b      	ldrb	r3, [r3, #28]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_RTC_SetDate+0x1c>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e071      	b.n	80028ae <HAL_RTC_SetDate+0x100>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2202      	movs	r2, #2
 80027d4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10e      	bne.n	80027fa <HAL_RTC_SetDate+0x4c>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	785b      	ldrb	r3, [r3, #1]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	f023 0310 	bic.w	r3, r3, #16
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	330a      	adds	r3, #10
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d11c      	bne.n	800283a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	78db      	ldrb	r3, [r3, #3]
 8002804:	4618      	mov	r0, r3
 8002806:	f000 f927 	bl	8002a58 <RTC_ByteToBcd2>
 800280a:	4603      	mov	r3, r0
 800280c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f920 	bl	8002a58 <RTC_ByteToBcd2>
 8002818:	4603      	mov	r3, r0
 800281a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800281c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	789b      	ldrb	r3, [r3, #2]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f918 	bl	8002a58 <RTC_ByteToBcd2>
 8002828:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800282a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	e00e      	b.n	8002858 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	78db      	ldrb	r3, [r3, #3]
 800283e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	785b      	ldrb	r3, [r3, #1]
 8002844:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002846:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800284c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002854:	4313      	orrs	r3, r2
 8002856:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	22ca      	movs	r2, #202	@ 0xca
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2253      	movs	r2, #83	@ 0x53
 8002866:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f899 	bl	80029a0 <RTC_EnterInitMode>
 800286e:	4603      	mov	r3, r0
 8002870:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10c      	bne.n	8002892 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002882:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002886:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f8c0 	bl	8002a0e <RTC_ExitInitMode>
 800288e:	4603      	mov	r3, r0
 8002890:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	22ff      	movs	r2, #255	@ 0xff
 80028a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]

  return status;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd90      	pop	{r4, r7, pc}

080028b6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80028d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80028d4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	0b5b      	lsrs	r3, r3, #13
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d11a      	bne.n	800294a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	78db      	ldrb	r3, [r3, #3]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 f8bb 	bl	8002a94 <RTC_Bcd2ToByte>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	785b      	ldrb	r3, [r3, #1]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f8b2 	bl	8002a94 <RTC_Bcd2ToByte>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	789b      	ldrb	r3, [r3, #2]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f8a9 	bl	8002a94 <RTC_Bcd2ToByte>
 8002942:	4603      	mov	r3, r0
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0d      	ldr	r2, [pc, #52]	@ (800299c <HAL_RTC_WaitForSynchro+0x48>)
 8002966:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002968:	f7fe f996 	bl	8000c98 <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800296e:	e009      	b.n	8002984 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002970:	f7fe f992 	bl	8000c98 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800297e:	d901      	bls.n	8002984 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e007      	b.n	8002994 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0ee      	beq.n	8002970 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	00017f5f 	.word	0x00017f5f

080029a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d122      	bne.n	8002a04 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029ce:	f7fe f963 	bl	8000c98 <HAL_GetTick>
 80029d2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029d4:	e00c      	b.n	80029f0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029d6:	f7fe f95f 	bl	8000c98 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029e4:	d904      	bls.n	80029f0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2204      	movs	r2, #4
 80029ea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <RTC_EnterInitMode+0x64>
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d1e8      	bne.n	80029d6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a28:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff8b 	bl	8002954 <HAL_RTC_WaitForSynchro>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2204      	movs	r2, #4
 8002a48:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002a66:	e005      	b.n	8002a74 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	3b0a      	subs	r3, #10
 8002a72:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	2b09      	cmp	r3, #9
 8002a78:	d8f6      	bhi.n	8002a68 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b2db      	uxtb	r3, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	b2db      	uxtb	r3, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e042      	b.n	8002b68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fd ff76 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	@ 0x24
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f973 	bl	8002e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	@ 0x28
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d175      	bne.n	8002c7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_UART_Transmit+0x2c>
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e06e      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2221      	movs	r2, #33	@ 0x21
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bae:	f7fe f873 	bl	8000c98 <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	88fa      	ldrh	r2, [r7, #6]
 8002bb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc8:	d108      	bne.n	8002bdc <HAL_UART_Transmit+0x6c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d104      	bne.n	8002bdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	e003      	b.n	8002be4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002be4:	e02e      	b.n	8002c44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	@ 0x80
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f848 	bl	8002c86 <UART_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e03a      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	3302      	adds	r3, #2
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	e007      	b.n	8002c36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	3301      	adds	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1cb      	bne.n	8002be6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2140      	movs	r1, #64	@ 0x40
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f814 	bl	8002c86 <UART_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e006      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	4613      	mov	r3, r2
 8002c94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c96:	e03b      	b.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9e:	d037      	beq.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca0:	f7fd fffa 	bl	8000c98 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	6a3a      	ldr	r2, [r7, #32]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e03a      	b.n	8002d30 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d023      	beq.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b80      	cmp	r3, #128	@ 0x80
 8002ccc:	d020      	beq.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b40      	cmp	r3, #64	@ 0x40
 8002cd2:	d01d      	beq.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d116      	bne.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f81d 	bl	8002d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2208      	movs	r2, #8
 8002d02:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e00f      	b.n	8002d30 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d0b4      	beq.n	8002c98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b095      	sub	sp, #84	@ 0x54
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4a:	e853 3f00 	ldrex	r3, [r3]
 8002d4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d60:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d68:	e841 2300 	strex	r3, r2, [r1]
 8002d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e5      	bne.n	8002d40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	e853 3f00 	ldrex	r3, [r3]
 8002d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3314      	adds	r3, #20
 8002d92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d9c:	e841 2300 	strex	r3, r2, [r1]
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e5      	bne.n	8002d74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d119      	bne.n	8002de4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	330c      	adds	r3, #12
 8002db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f023 0310 	bic.w	r3, r3, #16
 8002dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dd0:	61ba      	str	r2, [r7, #24]
 8002dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd4:	6979      	ldr	r1, [r7, #20]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	e841 2300 	strex	r3, r2, [r1]
 8002ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e5      	bne.n	8002db0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002df2:	bf00      	nop
 8002df4:	3754      	adds	r7, #84	@ 0x54
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e04:	b0c0      	sub	sp, #256	@ 0x100
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1c:	68d9      	ldr	r1, [r3, #12]
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	ea40 0301 	orr.w	r3, r0, r1
 8002e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e58:	f021 010c 	bic.w	r1, r1, #12
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e66:	430b      	orrs	r3, r1
 8002e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7a:	6999      	ldr	r1, [r3, #24]
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	ea40 0301 	orr.w	r3, r0, r1
 8002e86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80030cc <UART_SetConfig+0x2cc>)
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d005      	beq.n	8002ea0 <UART_SetConfig+0xa0>
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b8d      	ldr	r3, [pc, #564]	@ (80030d0 <UART_SetConfig+0x2d0>)
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d104      	bne.n	8002eaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ea0:	f7fe fafe 	bl	80014a0 <HAL_RCC_GetPCLK2Freq>
 8002ea4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ea8:	e003      	b.n	8002eb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eaa:	f7fe fae5 	bl	8001478 <HAL_RCC_GetPCLK1Freq>
 8002eae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ebc:	f040 810c 	bne.w	80030d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002eca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	462b      	mov	r3, r5
 8002ed6:	1891      	adds	r1, r2, r2
 8002ed8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002eda:	415b      	adcs	r3, r3
 8002edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	eb12 0801 	adds.w	r8, r2, r1
 8002ee8:	4629      	mov	r1, r5
 8002eea:	eb43 0901 	adc.w	r9, r3, r1
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f02:	4690      	mov	r8, r2
 8002f04:	4699      	mov	r9, r3
 8002f06:	4623      	mov	r3, r4
 8002f08:	eb18 0303 	adds.w	r3, r8, r3
 8002f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f10:	462b      	mov	r3, r5
 8002f12:	eb49 0303 	adc.w	r3, r9, r3
 8002f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f2e:	460b      	mov	r3, r1
 8002f30:	18db      	adds	r3, r3, r3
 8002f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f34:	4613      	mov	r3, r2
 8002f36:	eb42 0303 	adc.w	r3, r2, r3
 8002f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f44:	f7fd f9bc 	bl	80002c0 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4b61      	ldr	r3, [pc, #388]	@ (80030d4 <UART_SetConfig+0x2d4>)
 8002f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	011c      	lsls	r4, r3, #4
 8002f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	1891      	adds	r1, r2, r2
 8002f6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f70:	415b      	adcs	r3, r3
 8002f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f78:	4641      	mov	r1, r8
 8002f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f7e:	4649      	mov	r1, r9
 8002f80:	eb43 0b01 	adc.w	fp, r3, r1
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f98:	4692      	mov	sl, r2
 8002f9a:	469b      	mov	fp, r3
 8002f9c:	4643      	mov	r3, r8
 8002f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8002fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	18db      	adds	r3, r3, r3
 8002fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fca:	4613      	mov	r3, r2
 8002fcc:	eb42 0303 	adc.w	r3, r2, r3
 8002fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fda:	f7fd f971 	bl	80002c0 <__aeabi_uldivmod>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <UART_SetConfig+0x2d4>)
 8002fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2264      	movs	r2, #100	@ 0x64
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	1acb      	subs	r3, r1, r3
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ffa:	4b36      	ldr	r3, [pc, #216]	@ (80030d4 <UART_SetConfig+0x2d4>)
 8002ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003008:	441c      	add	r4, r3
 800300a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800300e:	2200      	movs	r2, #0
 8003010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003014:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800301c:	4642      	mov	r2, r8
 800301e:	464b      	mov	r3, r9
 8003020:	1891      	adds	r1, r2, r2
 8003022:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003024:	415b      	adcs	r3, r3
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800302c:	4641      	mov	r1, r8
 800302e:	1851      	adds	r1, r2, r1
 8003030:	6339      	str	r1, [r7, #48]	@ 0x30
 8003032:	4649      	mov	r1, r9
 8003034:	414b      	adcs	r3, r1
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003044:	4659      	mov	r1, fp
 8003046:	00cb      	lsls	r3, r1, #3
 8003048:	4651      	mov	r1, sl
 800304a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304e:	4651      	mov	r1, sl
 8003050:	00ca      	lsls	r2, r1, #3
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	4603      	mov	r3, r0
 8003058:	4642      	mov	r2, r8
 800305a:	189b      	adds	r3, r3, r2
 800305c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003060:	464b      	mov	r3, r9
 8003062:	460a      	mov	r2, r1
 8003064:	eb42 0303 	adc.w	r3, r2, r3
 8003068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003078:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800307c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003080:	460b      	mov	r3, r1
 8003082:	18db      	adds	r3, r3, r3
 8003084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003086:	4613      	mov	r3, r2
 8003088:	eb42 0303 	adc.w	r3, r2, r3
 800308c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800308e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003096:	f7fd f913 	bl	80002c0 <__aeabi_uldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4b0d      	ldr	r3, [pc, #52]	@ (80030d4 <UART_SetConfig+0x2d4>)
 80030a0:	fba3 1302 	umull	r1, r3, r3, r2
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	2164      	movs	r1, #100	@ 0x64
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	3332      	adds	r3, #50	@ 0x32
 80030b2:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <UART_SetConfig+0x2d4>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	f003 0207 	and.w	r2, r3, #7
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4422      	add	r2, r4
 80030c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030c8:	e106      	b.n	80032d8 <UART_SetConfig+0x4d8>
 80030ca:	bf00      	nop
 80030cc:	40011000 	.word	0x40011000
 80030d0:	40011400 	.word	0x40011400
 80030d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030ea:	4642      	mov	r2, r8
 80030ec:	464b      	mov	r3, r9
 80030ee:	1891      	adds	r1, r2, r2
 80030f0:	6239      	str	r1, [r7, #32]
 80030f2:	415b      	adcs	r3, r3
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030fa:	4641      	mov	r1, r8
 80030fc:	1854      	adds	r4, r2, r1
 80030fe:	4649      	mov	r1, r9
 8003100:	eb43 0501 	adc.w	r5, r3, r1
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	00eb      	lsls	r3, r5, #3
 800310e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003112:	00e2      	lsls	r2, r4, #3
 8003114:	4614      	mov	r4, r2
 8003116:	461d      	mov	r5, r3
 8003118:	4643      	mov	r3, r8
 800311a:	18e3      	adds	r3, r4, r3
 800311c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003120:	464b      	mov	r3, r9
 8003122:	eb45 0303 	adc.w	r3, r5, r3
 8003126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003136:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003146:	4629      	mov	r1, r5
 8003148:	008b      	lsls	r3, r1, #2
 800314a:	4621      	mov	r1, r4
 800314c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003150:	4621      	mov	r1, r4
 8003152:	008a      	lsls	r2, r1, #2
 8003154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003158:	f7fd f8b2 	bl	80002c0 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4b60      	ldr	r3, [pc, #384]	@ (80032e4 <UART_SetConfig+0x4e4>)
 8003162:	fba3 2302 	umull	r2, r3, r3, r2
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	011c      	lsls	r4, r3, #4
 800316a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800316e:	2200      	movs	r2, #0
 8003170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003174:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800317c:	4642      	mov	r2, r8
 800317e:	464b      	mov	r3, r9
 8003180:	1891      	adds	r1, r2, r2
 8003182:	61b9      	str	r1, [r7, #24]
 8003184:	415b      	adcs	r3, r3
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800318c:	4641      	mov	r1, r8
 800318e:	1851      	adds	r1, r2, r1
 8003190:	6139      	str	r1, [r7, #16]
 8003192:	4649      	mov	r1, r9
 8003194:	414b      	adcs	r3, r1
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031a4:	4659      	mov	r1, fp
 80031a6:	00cb      	lsls	r3, r1, #3
 80031a8:	4651      	mov	r1, sl
 80031aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ae:	4651      	mov	r1, sl
 80031b0:	00ca      	lsls	r2, r1, #3
 80031b2:	4610      	mov	r0, r2
 80031b4:	4619      	mov	r1, r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	4642      	mov	r2, r8
 80031ba:	189b      	adds	r3, r3, r2
 80031bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031c0:	464b      	mov	r3, r9
 80031c2:	460a      	mov	r2, r1
 80031c4:	eb42 0303 	adc.w	r3, r2, r3
 80031c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031e4:	4649      	mov	r1, r9
 80031e6:	008b      	lsls	r3, r1, #2
 80031e8:	4641      	mov	r1, r8
 80031ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ee:	4641      	mov	r1, r8
 80031f0:	008a      	lsls	r2, r1, #2
 80031f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031f6:	f7fd f863 	bl	80002c0 <__aeabi_uldivmod>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	4b38      	ldr	r3, [pc, #224]	@ (80032e4 <UART_SetConfig+0x4e4>)
 8003202:	fba3 2301 	umull	r2, r3, r3, r1
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2264      	movs	r2, #100	@ 0x64
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	1acb      	subs	r3, r1, r3
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	3332      	adds	r3, #50	@ 0x32
 8003214:	4a33      	ldr	r2, [pc, #204]	@ (80032e4 <UART_SetConfig+0x4e4>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003220:	441c      	add	r4, r3
 8003222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003226:	2200      	movs	r2, #0
 8003228:	673b      	str	r3, [r7, #112]	@ 0x70
 800322a:	677a      	str	r2, [r7, #116]	@ 0x74
 800322c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003230:	4642      	mov	r2, r8
 8003232:	464b      	mov	r3, r9
 8003234:	1891      	adds	r1, r2, r2
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	415b      	adcs	r3, r3
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003240:	4641      	mov	r1, r8
 8003242:	1851      	adds	r1, r2, r1
 8003244:	6039      	str	r1, [r7, #0]
 8003246:	4649      	mov	r1, r9
 8003248:	414b      	adcs	r3, r1
 800324a:	607b      	str	r3, [r7, #4]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003258:	4659      	mov	r1, fp
 800325a:	00cb      	lsls	r3, r1, #3
 800325c:	4651      	mov	r1, sl
 800325e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003262:	4651      	mov	r1, sl
 8003264:	00ca      	lsls	r2, r1, #3
 8003266:	4610      	mov	r0, r2
 8003268:	4619      	mov	r1, r3
 800326a:	4603      	mov	r3, r0
 800326c:	4642      	mov	r2, r8
 800326e:	189b      	adds	r3, r3, r2
 8003270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003272:	464b      	mov	r3, r9
 8003274:	460a      	mov	r2, r1
 8003276:	eb42 0303 	adc.w	r3, r2, r3
 800327a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	663b      	str	r3, [r7, #96]	@ 0x60
 8003286:	667a      	str	r2, [r7, #100]	@ 0x64
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003294:	4649      	mov	r1, r9
 8003296:	008b      	lsls	r3, r1, #2
 8003298:	4641      	mov	r1, r8
 800329a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800329e:	4641      	mov	r1, r8
 80032a0:	008a      	lsls	r2, r1, #2
 80032a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032a6:	f7fd f80b 	bl	80002c0 <__aeabi_uldivmod>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4b0d      	ldr	r3, [pc, #52]	@ (80032e4 <UART_SetConfig+0x4e4>)
 80032b0:	fba3 1302 	umull	r1, r3, r3, r2
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	2164      	movs	r1, #100	@ 0x64
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	3332      	adds	r3, #50	@ 0x32
 80032c2:	4a08      	ldr	r2, [pc, #32]	@ (80032e4 <UART_SetConfig+0x4e4>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	f003 020f 	and.w	r2, r3, #15
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4422      	add	r2, r4
 80032d6:	609a      	str	r2, [r3, #8]
}
 80032d8:	bf00      	nop
 80032da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032de:	46bd      	mov	sp, r7
 80032e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e4:	51eb851f 	.word	0x51eb851f

080032e8 <siprintf>:
 80032e8:	b40e      	push	{r1, r2, r3}
 80032ea:	b500      	push	{lr}
 80032ec:	b09c      	sub	sp, #112	@ 0x70
 80032ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80032f0:	9002      	str	r0, [sp, #8]
 80032f2:	9006      	str	r0, [sp, #24]
 80032f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80032f8:	4809      	ldr	r0, [pc, #36]	@ (8003320 <siprintf+0x38>)
 80032fa:	9107      	str	r1, [sp, #28]
 80032fc:	9104      	str	r1, [sp, #16]
 80032fe:	4909      	ldr	r1, [pc, #36]	@ (8003324 <siprintf+0x3c>)
 8003300:	f853 2b04 	ldr.w	r2, [r3], #4
 8003304:	9105      	str	r1, [sp, #20]
 8003306:	6800      	ldr	r0, [r0, #0]
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	a902      	add	r1, sp, #8
 800330c:	f000 f994 	bl	8003638 <_svfiprintf_r>
 8003310:	9b02      	ldr	r3, [sp, #8]
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	b01c      	add	sp, #112	@ 0x70
 8003318:	f85d eb04 	ldr.w	lr, [sp], #4
 800331c:	b003      	add	sp, #12
 800331e:	4770      	bx	lr
 8003320:	2000000c 	.word	0x2000000c
 8003324:	ffff0208 	.word	0xffff0208

08003328 <memset>:
 8003328:	4402      	add	r2, r0
 800332a:	4603      	mov	r3, r0
 800332c:	4293      	cmp	r3, r2
 800332e:	d100      	bne.n	8003332 <memset+0xa>
 8003330:	4770      	bx	lr
 8003332:	f803 1b01 	strb.w	r1, [r3], #1
 8003336:	e7f9      	b.n	800332c <memset+0x4>

08003338 <__errno>:
 8003338:	4b01      	ldr	r3, [pc, #4]	@ (8003340 <__errno+0x8>)
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	2000000c 	.word	0x2000000c

08003344 <__libc_init_array>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	4d0d      	ldr	r5, [pc, #52]	@ (800337c <__libc_init_array+0x38>)
 8003348:	4c0d      	ldr	r4, [pc, #52]	@ (8003380 <__libc_init_array+0x3c>)
 800334a:	1b64      	subs	r4, r4, r5
 800334c:	10a4      	asrs	r4, r4, #2
 800334e:	2600      	movs	r6, #0
 8003350:	42a6      	cmp	r6, r4
 8003352:	d109      	bne.n	8003368 <__libc_init_array+0x24>
 8003354:	4d0b      	ldr	r5, [pc, #44]	@ (8003384 <__libc_init_array+0x40>)
 8003356:	4c0c      	ldr	r4, [pc, #48]	@ (8003388 <__libc_init_array+0x44>)
 8003358:	f000 fc66 	bl	8003c28 <_init>
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	2600      	movs	r6, #0
 8003362:	42a6      	cmp	r6, r4
 8003364:	d105      	bne.n	8003372 <__libc_init_array+0x2e>
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	f855 3b04 	ldr.w	r3, [r5], #4
 800336c:	4798      	blx	r3
 800336e:	3601      	adds	r6, #1
 8003370:	e7ee      	b.n	8003350 <__libc_init_array+0xc>
 8003372:	f855 3b04 	ldr.w	r3, [r5], #4
 8003376:	4798      	blx	r3
 8003378:	3601      	adds	r6, #1
 800337a:	e7f2      	b.n	8003362 <__libc_init_array+0x1e>
 800337c:	08003cb8 	.word	0x08003cb8
 8003380:	08003cb8 	.word	0x08003cb8
 8003384:	08003cb8 	.word	0x08003cb8
 8003388:	08003cbc 	.word	0x08003cbc

0800338c <__retarget_lock_acquire_recursive>:
 800338c:	4770      	bx	lr

0800338e <__retarget_lock_release_recursive>:
 800338e:	4770      	bx	lr

08003390 <_free_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4605      	mov	r5, r0
 8003394:	2900      	cmp	r1, #0
 8003396:	d041      	beq.n	800341c <_free_r+0x8c>
 8003398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800339c:	1f0c      	subs	r4, r1, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bfb8      	it	lt
 80033a2:	18e4      	addlt	r4, r4, r3
 80033a4:	f000 f8e0 	bl	8003568 <__malloc_lock>
 80033a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003420 <_free_r+0x90>)
 80033aa:	6813      	ldr	r3, [r2, #0]
 80033ac:	b933      	cbnz	r3, 80033bc <_free_r+0x2c>
 80033ae:	6063      	str	r3, [r4, #4]
 80033b0:	6014      	str	r4, [r2, #0]
 80033b2:	4628      	mov	r0, r5
 80033b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033b8:	f000 b8dc 	b.w	8003574 <__malloc_unlock>
 80033bc:	42a3      	cmp	r3, r4
 80033be:	d908      	bls.n	80033d2 <_free_r+0x42>
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	1821      	adds	r1, r4, r0
 80033c4:	428b      	cmp	r3, r1
 80033c6:	bf01      	itttt	eq
 80033c8:	6819      	ldreq	r1, [r3, #0]
 80033ca:	685b      	ldreq	r3, [r3, #4]
 80033cc:	1809      	addeq	r1, r1, r0
 80033ce:	6021      	streq	r1, [r4, #0]
 80033d0:	e7ed      	b.n	80033ae <_free_r+0x1e>
 80033d2:	461a      	mov	r2, r3
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	b10b      	cbz	r3, 80033dc <_free_r+0x4c>
 80033d8:	42a3      	cmp	r3, r4
 80033da:	d9fa      	bls.n	80033d2 <_free_r+0x42>
 80033dc:	6811      	ldr	r1, [r2, #0]
 80033de:	1850      	adds	r0, r2, r1
 80033e0:	42a0      	cmp	r0, r4
 80033e2:	d10b      	bne.n	80033fc <_free_r+0x6c>
 80033e4:	6820      	ldr	r0, [r4, #0]
 80033e6:	4401      	add	r1, r0
 80033e8:	1850      	adds	r0, r2, r1
 80033ea:	4283      	cmp	r3, r0
 80033ec:	6011      	str	r1, [r2, #0]
 80033ee:	d1e0      	bne.n	80033b2 <_free_r+0x22>
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	6053      	str	r3, [r2, #4]
 80033f6:	4408      	add	r0, r1
 80033f8:	6010      	str	r0, [r2, #0]
 80033fa:	e7da      	b.n	80033b2 <_free_r+0x22>
 80033fc:	d902      	bls.n	8003404 <_free_r+0x74>
 80033fe:	230c      	movs	r3, #12
 8003400:	602b      	str	r3, [r5, #0]
 8003402:	e7d6      	b.n	80033b2 <_free_r+0x22>
 8003404:	6820      	ldr	r0, [r4, #0]
 8003406:	1821      	adds	r1, r4, r0
 8003408:	428b      	cmp	r3, r1
 800340a:	bf04      	itt	eq
 800340c:	6819      	ldreq	r1, [r3, #0]
 800340e:	685b      	ldreq	r3, [r3, #4]
 8003410:	6063      	str	r3, [r4, #4]
 8003412:	bf04      	itt	eq
 8003414:	1809      	addeq	r1, r1, r0
 8003416:	6021      	streq	r1, [r4, #0]
 8003418:	6054      	str	r4, [r2, #4]
 800341a:	e7ca      	b.n	80033b2 <_free_r+0x22>
 800341c:	bd38      	pop	{r3, r4, r5, pc}
 800341e:	bf00      	nop
 8003420:	20000230 	.word	0x20000230

08003424 <sbrk_aligned>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	4e0f      	ldr	r6, [pc, #60]	@ (8003464 <sbrk_aligned+0x40>)
 8003428:	460c      	mov	r4, r1
 800342a:	6831      	ldr	r1, [r6, #0]
 800342c:	4605      	mov	r5, r0
 800342e:	b911      	cbnz	r1, 8003436 <sbrk_aligned+0x12>
 8003430:	f000 fba6 	bl	8003b80 <_sbrk_r>
 8003434:	6030      	str	r0, [r6, #0]
 8003436:	4621      	mov	r1, r4
 8003438:	4628      	mov	r0, r5
 800343a:	f000 fba1 	bl	8003b80 <_sbrk_r>
 800343e:	1c43      	adds	r3, r0, #1
 8003440:	d103      	bne.n	800344a <sbrk_aligned+0x26>
 8003442:	f04f 34ff 	mov.w	r4, #4294967295
 8003446:	4620      	mov	r0, r4
 8003448:	bd70      	pop	{r4, r5, r6, pc}
 800344a:	1cc4      	adds	r4, r0, #3
 800344c:	f024 0403 	bic.w	r4, r4, #3
 8003450:	42a0      	cmp	r0, r4
 8003452:	d0f8      	beq.n	8003446 <sbrk_aligned+0x22>
 8003454:	1a21      	subs	r1, r4, r0
 8003456:	4628      	mov	r0, r5
 8003458:	f000 fb92 	bl	8003b80 <_sbrk_r>
 800345c:	3001      	adds	r0, #1
 800345e:	d1f2      	bne.n	8003446 <sbrk_aligned+0x22>
 8003460:	e7ef      	b.n	8003442 <sbrk_aligned+0x1e>
 8003462:	bf00      	nop
 8003464:	2000022c 	.word	0x2000022c

08003468 <_malloc_r>:
 8003468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800346c:	1ccd      	adds	r5, r1, #3
 800346e:	f025 0503 	bic.w	r5, r5, #3
 8003472:	3508      	adds	r5, #8
 8003474:	2d0c      	cmp	r5, #12
 8003476:	bf38      	it	cc
 8003478:	250c      	movcc	r5, #12
 800347a:	2d00      	cmp	r5, #0
 800347c:	4606      	mov	r6, r0
 800347e:	db01      	blt.n	8003484 <_malloc_r+0x1c>
 8003480:	42a9      	cmp	r1, r5
 8003482:	d904      	bls.n	800348e <_malloc_r+0x26>
 8003484:	230c      	movs	r3, #12
 8003486:	6033      	str	r3, [r6, #0]
 8003488:	2000      	movs	r0, #0
 800348a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800348e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003564 <_malloc_r+0xfc>
 8003492:	f000 f869 	bl	8003568 <__malloc_lock>
 8003496:	f8d8 3000 	ldr.w	r3, [r8]
 800349a:	461c      	mov	r4, r3
 800349c:	bb44      	cbnz	r4, 80034f0 <_malloc_r+0x88>
 800349e:	4629      	mov	r1, r5
 80034a0:	4630      	mov	r0, r6
 80034a2:	f7ff ffbf 	bl	8003424 <sbrk_aligned>
 80034a6:	1c43      	adds	r3, r0, #1
 80034a8:	4604      	mov	r4, r0
 80034aa:	d158      	bne.n	800355e <_malloc_r+0xf6>
 80034ac:	f8d8 4000 	ldr.w	r4, [r8]
 80034b0:	4627      	mov	r7, r4
 80034b2:	2f00      	cmp	r7, #0
 80034b4:	d143      	bne.n	800353e <_malloc_r+0xd6>
 80034b6:	2c00      	cmp	r4, #0
 80034b8:	d04b      	beq.n	8003552 <_malloc_r+0xea>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	4639      	mov	r1, r7
 80034be:	4630      	mov	r0, r6
 80034c0:	eb04 0903 	add.w	r9, r4, r3
 80034c4:	f000 fb5c 	bl	8003b80 <_sbrk_r>
 80034c8:	4581      	cmp	r9, r0
 80034ca:	d142      	bne.n	8003552 <_malloc_r+0xea>
 80034cc:	6821      	ldr	r1, [r4, #0]
 80034ce:	1a6d      	subs	r5, r5, r1
 80034d0:	4629      	mov	r1, r5
 80034d2:	4630      	mov	r0, r6
 80034d4:	f7ff ffa6 	bl	8003424 <sbrk_aligned>
 80034d8:	3001      	adds	r0, #1
 80034da:	d03a      	beq.n	8003552 <_malloc_r+0xea>
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	442b      	add	r3, r5
 80034e0:	6023      	str	r3, [r4, #0]
 80034e2:	f8d8 3000 	ldr.w	r3, [r8]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	bb62      	cbnz	r2, 8003544 <_malloc_r+0xdc>
 80034ea:	f8c8 7000 	str.w	r7, [r8]
 80034ee:	e00f      	b.n	8003510 <_malloc_r+0xa8>
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	1b52      	subs	r2, r2, r5
 80034f4:	d420      	bmi.n	8003538 <_malloc_r+0xd0>
 80034f6:	2a0b      	cmp	r2, #11
 80034f8:	d917      	bls.n	800352a <_malloc_r+0xc2>
 80034fa:	1961      	adds	r1, r4, r5
 80034fc:	42a3      	cmp	r3, r4
 80034fe:	6025      	str	r5, [r4, #0]
 8003500:	bf18      	it	ne
 8003502:	6059      	strne	r1, [r3, #4]
 8003504:	6863      	ldr	r3, [r4, #4]
 8003506:	bf08      	it	eq
 8003508:	f8c8 1000 	streq.w	r1, [r8]
 800350c:	5162      	str	r2, [r4, r5]
 800350e:	604b      	str	r3, [r1, #4]
 8003510:	4630      	mov	r0, r6
 8003512:	f000 f82f 	bl	8003574 <__malloc_unlock>
 8003516:	f104 000b 	add.w	r0, r4, #11
 800351a:	1d23      	adds	r3, r4, #4
 800351c:	f020 0007 	bic.w	r0, r0, #7
 8003520:	1ac2      	subs	r2, r0, r3
 8003522:	bf1c      	itt	ne
 8003524:	1a1b      	subne	r3, r3, r0
 8003526:	50a3      	strne	r3, [r4, r2]
 8003528:	e7af      	b.n	800348a <_malloc_r+0x22>
 800352a:	6862      	ldr	r2, [r4, #4]
 800352c:	42a3      	cmp	r3, r4
 800352e:	bf0c      	ite	eq
 8003530:	f8c8 2000 	streq.w	r2, [r8]
 8003534:	605a      	strne	r2, [r3, #4]
 8003536:	e7eb      	b.n	8003510 <_malloc_r+0xa8>
 8003538:	4623      	mov	r3, r4
 800353a:	6864      	ldr	r4, [r4, #4]
 800353c:	e7ae      	b.n	800349c <_malloc_r+0x34>
 800353e:	463c      	mov	r4, r7
 8003540:	687f      	ldr	r7, [r7, #4]
 8003542:	e7b6      	b.n	80034b2 <_malloc_r+0x4a>
 8003544:	461a      	mov	r2, r3
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	42a3      	cmp	r3, r4
 800354a:	d1fb      	bne.n	8003544 <_malloc_r+0xdc>
 800354c:	2300      	movs	r3, #0
 800354e:	6053      	str	r3, [r2, #4]
 8003550:	e7de      	b.n	8003510 <_malloc_r+0xa8>
 8003552:	230c      	movs	r3, #12
 8003554:	6033      	str	r3, [r6, #0]
 8003556:	4630      	mov	r0, r6
 8003558:	f000 f80c 	bl	8003574 <__malloc_unlock>
 800355c:	e794      	b.n	8003488 <_malloc_r+0x20>
 800355e:	6005      	str	r5, [r0, #0]
 8003560:	e7d6      	b.n	8003510 <_malloc_r+0xa8>
 8003562:	bf00      	nop
 8003564:	20000230 	.word	0x20000230

08003568 <__malloc_lock>:
 8003568:	4801      	ldr	r0, [pc, #4]	@ (8003570 <__malloc_lock+0x8>)
 800356a:	f7ff bf0f 	b.w	800338c <__retarget_lock_acquire_recursive>
 800356e:	bf00      	nop
 8003570:	20000228 	.word	0x20000228

08003574 <__malloc_unlock>:
 8003574:	4801      	ldr	r0, [pc, #4]	@ (800357c <__malloc_unlock+0x8>)
 8003576:	f7ff bf0a 	b.w	800338e <__retarget_lock_release_recursive>
 800357a:	bf00      	nop
 800357c:	20000228 	.word	0x20000228

08003580 <__ssputs_r>:
 8003580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003584:	688e      	ldr	r6, [r1, #8]
 8003586:	461f      	mov	r7, r3
 8003588:	42be      	cmp	r6, r7
 800358a:	680b      	ldr	r3, [r1, #0]
 800358c:	4682      	mov	sl, r0
 800358e:	460c      	mov	r4, r1
 8003590:	4690      	mov	r8, r2
 8003592:	d82d      	bhi.n	80035f0 <__ssputs_r+0x70>
 8003594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003598:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800359c:	d026      	beq.n	80035ec <__ssputs_r+0x6c>
 800359e:	6965      	ldr	r5, [r4, #20]
 80035a0:	6909      	ldr	r1, [r1, #16]
 80035a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035a6:	eba3 0901 	sub.w	r9, r3, r1
 80035aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035ae:	1c7b      	adds	r3, r7, #1
 80035b0:	444b      	add	r3, r9
 80035b2:	106d      	asrs	r5, r5, #1
 80035b4:	429d      	cmp	r5, r3
 80035b6:	bf38      	it	cc
 80035b8:	461d      	movcc	r5, r3
 80035ba:	0553      	lsls	r3, r2, #21
 80035bc:	d527      	bpl.n	800360e <__ssputs_r+0x8e>
 80035be:	4629      	mov	r1, r5
 80035c0:	f7ff ff52 	bl	8003468 <_malloc_r>
 80035c4:	4606      	mov	r6, r0
 80035c6:	b360      	cbz	r0, 8003622 <__ssputs_r+0xa2>
 80035c8:	6921      	ldr	r1, [r4, #16]
 80035ca:	464a      	mov	r2, r9
 80035cc:	f000 fae8 	bl	8003ba0 <memcpy>
 80035d0:	89a3      	ldrh	r3, [r4, #12]
 80035d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80035d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035da:	81a3      	strh	r3, [r4, #12]
 80035dc:	6126      	str	r6, [r4, #16]
 80035de:	6165      	str	r5, [r4, #20]
 80035e0:	444e      	add	r6, r9
 80035e2:	eba5 0509 	sub.w	r5, r5, r9
 80035e6:	6026      	str	r6, [r4, #0]
 80035e8:	60a5      	str	r5, [r4, #8]
 80035ea:	463e      	mov	r6, r7
 80035ec:	42be      	cmp	r6, r7
 80035ee:	d900      	bls.n	80035f2 <__ssputs_r+0x72>
 80035f0:	463e      	mov	r6, r7
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	4632      	mov	r2, r6
 80035f6:	4641      	mov	r1, r8
 80035f8:	f000 faa8 	bl	8003b4c <memmove>
 80035fc:	68a3      	ldr	r3, [r4, #8]
 80035fe:	1b9b      	subs	r3, r3, r6
 8003600:	60a3      	str	r3, [r4, #8]
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	4433      	add	r3, r6
 8003606:	6023      	str	r3, [r4, #0]
 8003608:	2000      	movs	r0, #0
 800360a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360e:	462a      	mov	r2, r5
 8003610:	f000 fad4 	bl	8003bbc <_realloc_r>
 8003614:	4606      	mov	r6, r0
 8003616:	2800      	cmp	r0, #0
 8003618:	d1e0      	bne.n	80035dc <__ssputs_r+0x5c>
 800361a:	6921      	ldr	r1, [r4, #16]
 800361c:	4650      	mov	r0, sl
 800361e:	f7ff feb7 	bl	8003390 <_free_r>
 8003622:	230c      	movs	r3, #12
 8003624:	f8ca 3000 	str.w	r3, [sl]
 8003628:	89a3      	ldrh	r3, [r4, #12]
 800362a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800362e:	81a3      	strh	r3, [r4, #12]
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	e7e9      	b.n	800360a <__ssputs_r+0x8a>
	...

08003638 <_svfiprintf_r>:
 8003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363c:	4698      	mov	r8, r3
 800363e:	898b      	ldrh	r3, [r1, #12]
 8003640:	061b      	lsls	r3, r3, #24
 8003642:	b09d      	sub	sp, #116	@ 0x74
 8003644:	4607      	mov	r7, r0
 8003646:	460d      	mov	r5, r1
 8003648:	4614      	mov	r4, r2
 800364a:	d510      	bpl.n	800366e <_svfiprintf_r+0x36>
 800364c:	690b      	ldr	r3, [r1, #16]
 800364e:	b973      	cbnz	r3, 800366e <_svfiprintf_r+0x36>
 8003650:	2140      	movs	r1, #64	@ 0x40
 8003652:	f7ff ff09 	bl	8003468 <_malloc_r>
 8003656:	6028      	str	r0, [r5, #0]
 8003658:	6128      	str	r0, [r5, #16]
 800365a:	b930      	cbnz	r0, 800366a <_svfiprintf_r+0x32>
 800365c:	230c      	movs	r3, #12
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	b01d      	add	sp, #116	@ 0x74
 8003666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366a:	2340      	movs	r3, #64	@ 0x40
 800366c:	616b      	str	r3, [r5, #20]
 800366e:	2300      	movs	r3, #0
 8003670:	9309      	str	r3, [sp, #36]	@ 0x24
 8003672:	2320      	movs	r3, #32
 8003674:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003678:	f8cd 800c 	str.w	r8, [sp, #12]
 800367c:	2330      	movs	r3, #48	@ 0x30
 800367e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800381c <_svfiprintf_r+0x1e4>
 8003682:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003686:	f04f 0901 	mov.w	r9, #1
 800368a:	4623      	mov	r3, r4
 800368c:	469a      	mov	sl, r3
 800368e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003692:	b10a      	cbz	r2, 8003698 <_svfiprintf_r+0x60>
 8003694:	2a25      	cmp	r2, #37	@ 0x25
 8003696:	d1f9      	bne.n	800368c <_svfiprintf_r+0x54>
 8003698:	ebba 0b04 	subs.w	fp, sl, r4
 800369c:	d00b      	beq.n	80036b6 <_svfiprintf_r+0x7e>
 800369e:	465b      	mov	r3, fp
 80036a0:	4622      	mov	r2, r4
 80036a2:	4629      	mov	r1, r5
 80036a4:	4638      	mov	r0, r7
 80036a6:	f7ff ff6b 	bl	8003580 <__ssputs_r>
 80036aa:	3001      	adds	r0, #1
 80036ac:	f000 80a7 	beq.w	80037fe <_svfiprintf_r+0x1c6>
 80036b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036b2:	445a      	add	r2, fp
 80036b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80036b6:	f89a 3000 	ldrb.w	r3, [sl]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 809f 	beq.w	80037fe <_svfiprintf_r+0x1c6>
 80036c0:	2300      	movs	r3, #0
 80036c2:	f04f 32ff 	mov.w	r2, #4294967295
 80036c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036ca:	f10a 0a01 	add.w	sl, sl, #1
 80036ce:	9304      	str	r3, [sp, #16]
 80036d0:	9307      	str	r3, [sp, #28]
 80036d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80036d8:	4654      	mov	r4, sl
 80036da:	2205      	movs	r2, #5
 80036dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e0:	484e      	ldr	r0, [pc, #312]	@ (800381c <_svfiprintf_r+0x1e4>)
 80036e2:	f7fc fd9d 	bl	8000220 <memchr>
 80036e6:	9a04      	ldr	r2, [sp, #16]
 80036e8:	b9d8      	cbnz	r0, 8003722 <_svfiprintf_r+0xea>
 80036ea:	06d0      	lsls	r0, r2, #27
 80036ec:	bf44      	itt	mi
 80036ee:	2320      	movmi	r3, #32
 80036f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036f4:	0711      	lsls	r1, r2, #28
 80036f6:	bf44      	itt	mi
 80036f8:	232b      	movmi	r3, #43	@ 0x2b
 80036fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003702:	2b2a      	cmp	r3, #42	@ 0x2a
 8003704:	d015      	beq.n	8003732 <_svfiprintf_r+0xfa>
 8003706:	9a07      	ldr	r2, [sp, #28]
 8003708:	4654      	mov	r4, sl
 800370a:	2000      	movs	r0, #0
 800370c:	f04f 0c0a 	mov.w	ip, #10
 8003710:	4621      	mov	r1, r4
 8003712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003716:	3b30      	subs	r3, #48	@ 0x30
 8003718:	2b09      	cmp	r3, #9
 800371a:	d94b      	bls.n	80037b4 <_svfiprintf_r+0x17c>
 800371c:	b1b0      	cbz	r0, 800374c <_svfiprintf_r+0x114>
 800371e:	9207      	str	r2, [sp, #28]
 8003720:	e014      	b.n	800374c <_svfiprintf_r+0x114>
 8003722:	eba0 0308 	sub.w	r3, r0, r8
 8003726:	fa09 f303 	lsl.w	r3, r9, r3
 800372a:	4313      	orrs	r3, r2
 800372c:	9304      	str	r3, [sp, #16]
 800372e:	46a2      	mov	sl, r4
 8003730:	e7d2      	b.n	80036d8 <_svfiprintf_r+0xa0>
 8003732:	9b03      	ldr	r3, [sp, #12]
 8003734:	1d19      	adds	r1, r3, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	9103      	str	r1, [sp, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	bfbb      	ittet	lt
 800373e:	425b      	neglt	r3, r3
 8003740:	f042 0202 	orrlt.w	r2, r2, #2
 8003744:	9307      	strge	r3, [sp, #28]
 8003746:	9307      	strlt	r3, [sp, #28]
 8003748:	bfb8      	it	lt
 800374a:	9204      	strlt	r2, [sp, #16]
 800374c:	7823      	ldrb	r3, [r4, #0]
 800374e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003750:	d10a      	bne.n	8003768 <_svfiprintf_r+0x130>
 8003752:	7863      	ldrb	r3, [r4, #1]
 8003754:	2b2a      	cmp	r3, #42	@ 0x2a
 8003756:	d132      	bne.n	80037be <_svfiprintf_r+0x186>
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	9203      	str	r2, [sp, #12]
 8003760:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003764:	3402      	adds	r4, #2
 8003766:	9305      	str	r3, [sp, #20]
 8003768:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800382c <_svfiprintf_r+0x1f4>
 800376c:	7821      	ldrb	r1, [r4, #0]
 800376e:	2203      	movs	r2, #3
 8003770:	4650      	mov	r0, sl
 8003772:	f7fc fd55 	bl	8000220 <memchr>
 8003776:	b138      	cbz	r0, 8003788 <_svfiprintf_r+0x150>
 8003778:	9b04      	ldr	r3, [sp, #16]
 800377a:	eba0 000a 	sub.w	r0, r0, sl
 800377e:	2240      	movs	r2, #64	@ 0x40
 8003780:	4082      	lsls	r2, r0
 8003782:	4313      	orrs	r3, r2
 8003784:	3401      	adds	r4, #1
 8003786:	9304      	str	r3, [sp, #16]
 8003788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800378c:	4824      	ldr	r0, [pc, #144]	@ (8003820 <_svfiprintf_r+0x1e8>)
 800378e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003792:	2206      	movs	r2, #6
 8003794:	f7fc fd44 	bl	8000220 <memchr>
 8003798:	2800      	cmp	r0, #0
 800379a:	d036      	beq.n	800380a <_svfiprintf_r+0x1d2>
 800379c:	4b21      	ldr	r3, [pc, #132]	@ (8003824 <_svfiprintf_r+0x1ec>)
 800379e:	bb1b      	cbnz	r3, 80037e8 <_svfiprintf_r+0x1b0>
 80037a0:	9b03      	ldr	r3, [sp, #12]
 80037a2:	3307      	adds	r3, #7
 80037a4:	f023 0307 	bic.w	r3, r3, #7
 80037a8:	3308      	adds	r3, #8
 80037aa:	9303      	str	r3, [sp, #12]
 80037ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037ae:	4433      	add	r3, r6
 80037b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80037b2:	e76a      	b.n	800368a <_svfiprintf_r+0x52>
 80037b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80037b8:	460c      	mov	r4, r1
 80037ba:	2001      	movs	r0, #1
 80037bc:	e7a8      	b.n	8003710 <_svfiprintf_r+0xd8>
 80037be:	2300      	movs	r3, #0
 80037c0:	3401      	adds	r4, #1
 80037c2:	9305      	str	r3, [sp, #20]
 80037c4:	4619      	mov	r1, r3
 80037c6:	f04f 0c0a 	mov.w	ip, #10
 80037ca:	4620      	mov	r0, r4
 80037cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037d0:	3a30      	subs	r2, #48	@ 0x30
 80037d2:	2a09      	cmp	r2, #9
 80037d4:	d903      	bls.n	80037de <_svfiprintf_r+0x1a6>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0c6      	beq.n	8003768 <_svfiprintf_r+0x130>
 80037da:	9105      	str	r1, [sp, #20]
 80037dc:	e7c4      	b.n	8003768 <_svfiprintf_r+0x130>
 80037de:	fb0c 2101 	mla	r1, ip, r1, r2
 80037e2:	4604      	mov	r4, r0
 80037e4:	2301      	movs	r3, #1
 80037e6:	e7f0      	b.n	80037ca <_svfiprintf_r+0x192>
 80037e8:	ab03      	add	r3, sp, #12
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	462a      	mov	r2, r5
 80037ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003828 <_svfiprintf_r+0x1f0>)
 80037f0:	a904      	add	r1, sp, #16
 80037f2:	4638      	mov	r0, r7
 80037f4:	f3af 8000 	nop.w
 80037f8:	1c42      	adds	r2, r0, #1
 80037fa:	4606      	mov	r6, r0
 80037fc:	d1d6      	bne.n	80037ac <_svfiprintf_r+0x174>
 80037fe:	89ab      	ldrh	r3, [r5, #12]
 8003800:	065b      	lsls	r3, r3, #25
 8003802:	f53f af2d 	bmi.w	8003660 <_svfiprintf_r+0x28>
 8003806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003808:	e72c      	b.n	8003664 <_svfiprintf_r+0x2c>
 800380a:	ab03      	add	r3, sp, #12
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	462a      	mov	r2, r5
 8003810:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <_svfiprintf_r+0x1f0>)
 8003812:	a904      	add	r1, sp, #16
 8003814:	4638      	mov	r0, r7
 8003816:	f000 f879 	bl	800390c <_printf_i>
 800381a:	e7ed      	b.n	80037f8 <_svfiprintf_r+0x1c0>
 800381c:	08003c7c 	.word	0x08003c7c
 8003820:	08003c86 	.word	0x08003c86
 8003824:	00000000 	.word	0x00000000
 8003828:	08003581 	.word	0x08003581
 800382c:	08003c82 	.word	0x08003c82

08003830 <_printf_common>:
 8003830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003834:	4616      	mov	r6, r2
 8003836:	4698      	mov	r8, r3
 8003838:	688a      	ldr	r2, [r1, #8]
 800383a:	690b      	ldr	r3, [r1, #16]
 800383c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003840:	4293      	cmp	r3, r2
 8003842:	bfb8      	it	lt
 8003844:	4613      	movlt	r3, r2
 8003846:	6033      	str	r3, [r6, #0]
 8003848:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800384c:	4607      	mov	r7, r0
 800384e:	460c      	mov	r4, r1
 8003850:	b10a      	cbz	r2, 8003856 <_printf_common+0x26>
 8003852:	3301      	adds	r3, #1
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	0699      	lsls	r1, r3, #26
 800385a:	bf42      	ittt	mi
 800385c:	6833      	ldrmi	r3, [r6, #0]
 800385e:	3302      	addmi	r3, #2
 8003860:	6033      	strmi	r3, [r6, #0]
 8003862:	6825      	ldr	r5, [r4, #0]
 8003864:	f015 0506 	ands.w	r5, r5, #6
 8003868:	d106      	bne.n	8003878 <_printf_common+0x48>
 800386a:	f104 0a19 	add.w	sl, r4, #25
 800386e:	68e3      	ldr	r3, [r4, #12]
 8003870:	6832      	ldr	r2, [r6, #0]
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	42ab      	cmp	r3, r5
 8003876:	dc26      	bgt.n	80038c6 <_printf_common+0x96>
 8003878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	3b00      	subs	r3, #0
 8003880:	bf18      	it	ne
 8003882:	2301      	movne	r3, #1
 8003884:	0692      	lsls	r2, r2, #26
 8003886:	d42b      	bmi.n	80038e0 <_printf_common+0xb0>
 8003888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800388c:	4641      	mov	r1, r8
 800388e:	4638      	mov	r0, r7
 8003890:	47c8      	blx	r9
 8003892:	3001      	adds	r0, #1
 8003894:	d01e      	beq.n	80038d4 <_printf_common+0xa4>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	6922      	ldr	r2, [r4, #16]
 800389a:	f003 0306 	and.w	r3, r3, #6
 800389e:	2b04      	cmp	r3, #4
 80038a0:	bf02      	ittt	eq
 80038a2:	68e5      	ldreq	r5, [r4, #12]
 80038a4:	6833      	ldreq	r3, [r6, #0]
 80038a6:	1aed      	subeq	r5, r5, r3
 80038a8:	68a3      	ldr	r3, [r4, #8]
 80038aa:	bf0c      	ite	eq
 80038ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038b0:	2500      	movne	r5, #0
 80038b2:	4293      	cmp	r3, r2
 80038b4:	bfc4      	itt	gt
 80038b6:	1a9b      	subgt	r3, r3, r2
 80038b8:	18ed      	addgt	r5, r5, r3
 80038ba:	2600      	movs	r6, #0
 80038bc:	341a      	adds	r4, #26
 80038be:	42b5      	cmp	r5, r6
 80038c0:	d11a      	bne.n	80038f8 <_printf_common+0xc8>
 80038c2:	2000      	movs	r0, #0
 80038c4:	e008      	b.n	80038d8 <_printf_common+0xa8>
 80038c6:	2301      	movs	r3, #1
 80038c8:	4652      	mov	r2, sl
 80038ca:	4641      	mov	r1, r8
 80038cc:	4638      	mov	r0, r7
 80038ce:	47c8      	blx	r9
 80038d0:	3001      	adds	r0, #1
 80038d2:	d103      	bne.n	80038dc <_printf_common+0xac>
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038dc:	3501      	adds	r5, #1
 80038de:	e7c6      	b.n	800386e <_printf_common+0x3e>
 80038e0:	18e1      	adds	r1, r4, r3
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	2030      	movs	r0, #48	@ 0x30
 80038e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038ea:	4422      	add	r2, r4
 80038ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038f4:	3302      	adds	r3, #2
 80038f6:	e7c7      	b.n	8003888 <_printf_common+0x58>
 80038f8:	2301      	movs	r3, #1
 80038fa:	4622      	mov	r2, r4
 80038fc:	4641      	mov	r1, r8
 80038fe:	4638      	mov	r0, r7
 8003900:	47c8      	blx	r9
 8003902:	3001      	adds	r0, #1
 8003904:	d0e6      	beq.n	80038d4 <_printf_common+0xa4>
 8003906:	3601      	adds	r6, #1
 8003908:	e7d9      	b.n	80038be <_printf_common+0x8e>
	...

0800390c <_printf_i>:
 800390c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003910:	7e0f      	ldrb	r7, [r1, #24]
 8003912:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003914:	2f78      	cmp	r7, #120	@ 0x78
 8003916:	4691      	mov	r9, r2
 8003918:	4680      	mov	r8, r0
 800391a:	460c      	mov	r4, r1
 800391c:	469a      	mov	sl, r3
 800391e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003922:	d807      	bhi.n	8003934 <_printf_i+0x28>
 8003924:	2f62      	cmp	r7, #98	@ 0x62
 8003926:	d80a      	bhi.n	800393e <_printf_i+0x32>
 8003928:	2f00      	cmp	r7, #0
 800392a:	f000 80d2 	beq.w	8003ad2 <_printf_i+0x1c6>
 800392e:	2f58      	cmp	r7, #88	@ 0x58
 8003930:	f000 80b9 	beq.w	8003aa6 <_printf_i+0x19a>
 8003934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003938:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800393c:	e03a      	b.n	80039b4 <_printf_i+0xa8>
 800393e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003942:	2b15      	cmp	r3, #21
 8003944:	d8f6      	bhi.n	8003934 <_printf_i+0x28>
 8003946:	a101      	add	r1, pc, #4	@ (adr r1, 800394c <_printf_i+0x40>)
 8003948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800394c:	080039a5 	.word	0x080039a5
 8003950:	080039b9 	.word	0x080039b9
 8003954:	08003935 	.word	0x08003935
 8003958:	08003935 	.word	0x08003935
 800395c:	08003935 	.word	0x08003935
 8003960:	08003935 	.word	0x08003935
 8003964:	080039b9 	.word	0x080039b9
 8003968:	08003935 	.word	0x08003935
 800396c:	08003935 	.word	0x08003935
 8003970:	08003935 	.word	0x08003935
 8003974:	08003935 	.word	0x08003935
 8003978:	08003ab9 	.word	0x08003ab9
 800397c:	080039e3 	.word	0x080039e3
 8003980:	08003a73 	.word	0x08003a73
 8003984:	08003935 	.word	0x08003935
 8003988:	08003935 	.word	0x08003935
 800398c:	08003adb 	.word	0x08003adb
 8003990:	08003935 	.word	0x08003935
 8003994:	080039e3 	.word	0x080039e3
 8003998:	08003935 	.word	0x08003935
 800399c:	08003935 	.word	0x08003935
 80039a0:	08003a7b 	.word	0x08003a7b
 80039a4:	6833      	ldr	r3, [r6, #0]
 80039a6:	1d1a      	adds	r2, r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6032      	str	r2, [r6, #0]
 80039ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039b4:	2301      	movs	r3, #1
 80039b6:	e09d      	b.n	8003af4 <_printf_i+0x1e8>
 80039b8:	6833      	ldr	r3, [r6, #0]
 80039ba:	6820      	ldr	r0, [r4, #0]
 80039bc:	1d19      	adds	r1, r3, #4
 80039be:	6031      	str	r1, [r6, #0]
 80039c0:	0606      	lsls	r6, r0, #24
 80039c2:	d501      	bpl.n	80039c8 <_printf_i+0xbc>
 80039c4:	681d      	ldr	r5, [r3, #0]
 80039c6:	e003      	b.n	80039d0 <_printf_i+0xc4>
 80039c8:	0645      	lsls	r5, r0, #25
 80039ca:	d5fb      	bpl.n	80039c4 <_printf_i+0xb8>
 80039cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039d0:	2d00      	cmp	r5, #0
 80039d2:	da03      	bge.n	80039dc <_printf_i+0xd0>
 80039d4:	232d      	movs	r3, #45	@ 0x2d
 80039d6:	426d      	negs	r5, r5
 80039d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039dc:	4859      	ldr	r0, [pc, #356]	@ (8003b44 <_printf_i+0x238>)
 80039de:	230a      	movs	r3, #10
 80039e0:	e011      	b.n	8003a06 <_printf_i+0xfa>
 80039e2:	6821      	ldr	r1, [r4, #0]
 80039e4:	6833      	ldr	r3, [r6, #0]
 80039e6:	0608      	lsls	r0, r1, #24
 80039e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80039ec:	d402      	bmi.n	80039f4 <_printf_i+0xe8>
 80039ee:	0649      	lsls	r1, r1, #25
 80039f0:	bf48      	it	mi
 80039f2:	b2ad      	uxthmi	r5, r5
 80039f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80039f6:	4853      	ldr	r0, [pc, #332]	@ (8003b44 <_printf_i+0x238>)
 80039f8:	6033      	str	r3, [r6, #0]
 80039fa:	bf14      	ite	ne
 80039fc:	230a      	movne	r3, #10
 80039fe:	2308      	moveq	r3, #8
 8003a00:	2100      	movs	r1, #0
 8003a02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a06:	6866      	ldr	r6, [r4, #4]
 8003a08:	60a6      	str	r6, [r4, #8]
 8003a0a:	2e00      	cmp	r6, #0
 8003a0c:	bfa2      	ittt	ge
 8003a0e:	6821      	ldrge	r1, [r4, #0]
 8003a10:	f021 0104 	bicge.w	r1, r1, #4
 8003a14:	6021      	strge	r1, [r4, #0]
 8003a16:	b90d      	cbnz	r5, 8003a1c <_printf_i+0x110>
 8003a18:	2e00      	cmp	r6, #0
 8003a1a:	d04b      	beq.n	8003ab4 <_printf_i+0x1a8>
 8003a1c:	4616      	mov	r6, r2
 8003a1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a22:	fb03 5711 	mls	r7, r3, r1, r5
 8003a26:	5dc7      	ldrb	r7, [r0, r7]
 8003a28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a2c:	462f      	mov	r7, r5
 8003a2e:	42bb      	cmp	r3, r7
 8003a30:	460d      	mov	r5, r1
 8003a32:	d9f4      	bls.n	8003a1e <_printf_i+0x112>
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d10b      	bne.n	8003a50 <_printf_i+0x144>
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	07df      	lsls	r7, r3, #31
 8003a3c:	d508      	bpl.n	8003a50 <_printf_i+0x144>
 8003a3e:	6923      	ldr	r3, [r4, #16]
 8003a40:	6861      	ldr	r1, [r4, #4]
 8003a42:	4299      	cmp	r1, r3
 8003a44:	bfde      	ittt	le
 8003a46:	2330      	movle	r3, #48	@ 0x30
 8003a48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a50:	1b92      	subs	r2, r2, r6
 8003a52:	6122      	str	r2, [r4, #16]
 8003a54:	f8cd a000 	str.w	sl, [sp]
 8003a58:	464b      	mov	r3, r9
 8003a5a:	aa03      	add	r2, sp, #12
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	4640      	mov	r0, r8
 8003a60:	f7ff fee6 	bl	8003830 <_printf_common>
 8003a64:	3001      	adds	r0, #1
 8003a66:	d14a      	bne.n	8003afe <_printf_i+0x1f2>
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	b004      	add	sp, #16
 8003a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	f043 0320 	orr.w	r3, r3, #32
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	4833      	ldr	r0, [pc, #204]	@ (8003b48 <_printf_i+0x23c>)
 8003a7c:	2778      	movs	r7, #120	@ 0x78
 8003a7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	6831      	ldr	r1, [r6, #0]
 8003a86:	061f      	lsls	r7, r3, #24
 8003a88:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a8c:	d402      	bmi.n	8003a94 <_printf_i+0x188>
 8003a8e:	065f      	lsls	r7, r3, #25
 8003a90:	bf48      	it	mi
 8003a92:	b2ad      	uxthmi	r5, r5
 8003a94:	6031      	str	r1, [r6, #0]
 8003a96:	07d9      	lsls	r1, r3, #31
 8003a98:	bf44      	itt	mi
 8003a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8003a9e:	6023      	strmi	r3, [r4, #0]
 8003aa0:	b11d      	cbz	r5, 8003aaa <_printf_i+0x19e>
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	e7ac      	b.n	8003a00 <_printf_i+0xf4>
 8003aa6:	4827      	ldr	r0, [pc, #156]	@ (8003b44 <_printf_i+0x238>)
 8003aa8:	e7e9      	b.n	8003a7e <_printf_i+0x172>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	f023 0320 	bic.w	r3, r3, #32
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	e7f6      	b.n	8003aa2 <_printf_i+0x196>
 8003ab4:	4616      	mov	r6, r2
 8003ab6:	e7bd      	b.n	8003a34 <_printf_i+0x128>
 8003ab8:	6833      	ldr	r3, [r6, #0]
 8003aba:	6825      	ldr	r5, [r4, #0]
 8003abc:	6961      	ldr	r1, [r4, #20]
 8003abe:	1d18      	adds	r0, r3, #4
 8003ac0:	6030      	str	r0, [r6, #0]
 8003ac2:	062e      	lsls	r6, r5, #24
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	d501      	bpl.n	8003acc <_printf_i+0x1c0>
 8003ac8:	6019      	str	r1, [r3, #0]
 8003aca:	e002      	b.n	8003ad2 <_printf_i+0x1c6>
 8003acc:	0668      	lsls	r0, r5, #25
 8003ace:	d5fb      	bpl.n	8003ac8 <_printf_i+0x1bc>
 8003ad0:	8019      	strh	r1, [r3, #0]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6123      	str	r3, [r4, #16]
 8003ad6:	4616      	mov	r6, r2
 8003ad8:	e7bc      	b.n	8003a54 <_printf_i+0x148>
 8003ada:	6833      	ldr	r3, [r6, #0]
 8003adc:	1d1a      	adds	r2, r3, #4
 8003ade:	6032      	str	r2, [r6, #0]
 8003ae0:	681e      	ldr	r6, [r3, #0]
 8003ae2:	6862      	ldr	r2, [r4, #4]
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	f7fc fb9a 	bl	8000220 <memchr>
 8003aec:	b108      	cbz	r0, 8003af2 <_printf_i+0x1e6>
 8003aee:	1b80      	subs	r0, r0, r6
 8003af0:	6060      	str	r0, [r4, #4]
 8003af2:	6863      	ldr	r3, [r4, #4]
 8003af4:	6123      	str	r3, [r4, #16]
 8003af6:	2300      	movs	r3, #0
 8003af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003afc:	e7aa      	b.n	8003a54 <_printf_i+0x148>
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	4632      	mov	r2, r6
 8003b02:	4649      	mov	r1, r9
 8003b04:	4640      	mov	r0, r8
 8003b06:	47d0      	blx	sl
 8003b08:	3001      	adds	r0, #1
 8003b0a:	d0ad      	beq.n	8003a68 <_printf_i+0x15c>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	079b      	lsls	r3, r3, #30
 8003b10:	d413      	bmi.n	8003b3a <_printf_i+0x22e>
 8003b12:	68e0      	ldr	r0, [r4, #12]
 8003b14:	9b03      	ldr	r3, [sp, #12]
 8003b16:	4298      	cmp	r0, r3
 8003b18:	bfb8      	it	lt
 8003b1a:	4618      	movlt	r0, r3
 8003b1c:	e7a6      	b.n	8003a6c <_printf_i+0x160>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	4632      	mov	r2, r6
 8003b22:	4649      	mov	r1, r9
 8003b24:	4640      	mov	r0, r8
 8003b26:	47d0      	blx	sl
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d09d      	beq.n	8003a68 <_printf_i+0x15c>
 8003b2c:	3501      	adds	r5, #1
 8003b2e:	68e3      	ldr	r3, [r4, #12]
 8003b30:	9903      	ldr	r1, [sp, #12]
 8003b32:	1a5b      	subs	r3, r3, r1
 8003b34:	42ab      	cmp	r3, r5
 8003b36:	dcf2      	bgt.n	8003b1e <_printf_i+0x212>
 8003b38:	e7eb      	b.n	8003b12 <_printf_i+0x206>
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	f104 0619 	add.w	r6, r4, #25
 8003b40:	e7f5      	b.n	8003b2e <_printf_i+0x222>
 8003b42:	bf00      	nop
 8003b44:	08003c8d 	.word	0x08003c8d
 8003b48:	08003c9e 	.word	0x08003c9e

08003b4c <memmove>:
 8003b4c:	4288      	cmp	r0, r1
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	eb01 0402 	add.w	r4, r1, r2
 8003b54:	d902      	bls.n	8003b5c <memmove+0x10>
 8003b56:	4284      	cmp	r4, r0
 8003b58:	4623      	mov	r3, r4
 8003b5a:	d807      	bhi.n	8003b6c <memmove+0x20>
 8003b5c:	1e43      	subs	r3, r0, #1
 8003b5e:	42a1      	cmp	r1, r4
 8003b60:	d008      	beq.n	8003b74 <memmove+0x28>
 8003b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b6a:	e7f8      	b.n	8003b5e <memmove+0x12>
 8003b6c:	4402      	add	r2, r0
 8003b6e:	4601      	mov	r1, r0
 8003b70:	428a      	cmp	r2, r1
 8003b72:	d100      	bne.n	8003b76 <memmove+0x2a>
 8003b74:	bd10      	pop	{r4, pc}
 8003b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b7e:	e7f7      	b.n	8003b70 <memmove+0x24>

08003b80 <_sbrk_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	4d06      	ldr	r5, [pc, #24]	@ (8003b9c <_sbrk_r+0x1c>)
 8003b84:	2300      	movs	r3, #0
 8003b86:	4604      	mov	r4, r0
 8003b88:	4608      	mov	r0, r1
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	f7fc ffac 	bl	8000ae8 <_sbrk>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_sbrk_r+0x1a>
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_sbrk_r+0x1a>
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	20000224 	.word	0x20000224

08003ba0 <memcpy>:
 8003ba0:	440a      	add	r2, r1
 8003ba2:	4291      	cmp	r1, r2
 8003ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ba8:	d100      	bne.n	8003bac <memcpy+0xc>
 8003baa:	4770      	bx	lr
 8003bac:	b510      	push	{r4, lr}
 8003bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bb6:	4291      	cmp	r1, r2
 8003bb8:	d1f9      	bne.n	8003bae <memcpy+0xe>
 8003bba:	bd10      	pop	{r4, pc}

08003bbc <_realloc_r>:
 8003bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc0:	4680      	mov	r8, r0
 8003bc2:	4615      	mov	r5, r2
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	b921      	cbnz	r1, 8003bd2 <_realloc_r+0x16>
 8003bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bcc:	4611      	mov	r1, r2
 8003bce:	f7ff bc4b 	b.w	8003468 <_malloc_r>
 8003bd2:	b92a      	cbnz	r2, 8003be0 <_realloc_r+0x24>
 8003bd4:	f7ff fbdc 	bl	8003390 <_free_r>
 8003bd8:	2400      	movs	r4, #0
 8003bda:	4620      	mov	r0, r4
 8003bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003be0:	f000 f81a 	bl	8003c18 <_malloc_usable_size_r>
 8003be4:	4285      	cmp	r5, r0
 8003be6:	4606      	mov	r6, r0
 8003be8:	d802      	bhi.n	8003bf0 <_realloc_r+0x34>
 8003bea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003bee:	d8f4      	bhi.n	8003bda <_realloc_r+0x1e>
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	4640      	mov	r0, r8
 8003bf4:	f7ff fc38 	bl	8003468 <_malloc_r>
 8003bf8:	4607      	mov	r7, r0
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d0ec      	beq.n	8003bd8 <_realloc_r+0x1c>
 8003bfe:	42b5      	cmp	r5, r6
 8003c00:	462a      	mov	r2, r5
 8003c02:	4621      	mov	r1, r4
 8003c04:	bf28      	it	cs
 8003c06:	4632      	movcs	r2, r6
 8003c08:	f7ff ffca 	bl	8003ba0 <memcpy>
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4640      	mov	r0, r8
 8003c10:	f7ff fbbe 	bl	8003390 <_free_r>
 8003c14:	463c      	mov	r4, r7
 8003c16:	e7e0      	b.n	8003bda <_realloc_r+0x1e>

08003c18 <_malloc_usable_size_r>:
 8003c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c1c:	1f18      	subs	r0, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bfbc      	itt	lt
 8003c22:	580b      	ldrlt	r3, [r1, r0]
 8003c24:	18c0      	addlt	r0, r0, r3
 8003c26:	4770      	bx	lr

08003c28 <_init>:
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	bf00      	nop
 8003c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2e:	bc08      	pop	{r3}
 8003c30:	469e      	mov	lr, r3
 8003c32:	4770      	bx	lr

08003c34 <_fini>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr
